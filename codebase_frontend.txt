Codebase Structure Overview:

├── .vscode
├── eslint.config.js
├── index.html
├── postcss.config.js
├── public
├── src
│   ├── App.vue
│   ├── assets
│   ├── components
│   │   ├── AIFeedbackCard.vue
│   │   ├── ChatFeedbackCard.vue
│   │   ├── ErrorDetailCard.vue
│   │   ├── ImageCarousel.vue
│   │   ├── ImageChatMessage.vue
│   │   ├── ImageStack.vue
│   │   ├── JournalCard.vue
│   │   ├── ManualModal.vue
│   │   ├── ProgressSummaryCard.vue
│   │   ├── TopicCard.vue
│   │   └── admin
│   │       ├── AdminJournalCard.vue
│   │       ├── AdminStatCard.vue
│   │       ├── ErrorDistributionChart.vue
│   │       ├── ErrorTrendChart.vue
│   │       └── StudentTable.vue
│   ├── main.js
│   ├── router
│   │   └── index.js
│   ├── services
│   │   └── api.js
│   ├── stores
│   │   ├── adminStore.js
│   │   ├── aiStore.js
│   │   ├── authStore.js
│   │   ├── counter.js
│   │   ├── journalStore.js
│   │   ├── progressStore.js
│   │   └── uiStore.js
│   ├── style.css
│   └── views
│       ├── DashboardView.vue
│       ├── LearningHubView.vue
│       ├── LoginView.vue
│       ├── SignupView.vue
│       ├── TopicDetailView.vue
│       ├── WriterView.vue
│       └── admin
│           ├── AdminDashboardView.vue
│           ├── AdminJournalDetailView.vue
│           ├── AdminManageStudentsView.vue
│           └── AdminStudentDetailView.vue
├── tailwind.config.js
├── vite.config.cg.js
├── vite.config.eg.js
├── vite.config.js
└── vite.config.test.js


==================================================

Compiled Code Contents:


### File: vite.config.cg.js

```
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  server: {
    port: 7779,
    host: '0.0.0.0', // Add this line
    allowedHosts: ['ai-ndhu-lab', '134.208.6.129']
  },
});

```


### File: postcss.config.js

```
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


```


### File: vite.config.js

```
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  server: {
    port: 3000,
    host: '0.0.0.0', // Add this line
    allowedHosts: ['ai-ndhu-lab', '134.208.6.129']
  },
});

```


### File: tailwind.config.js

```
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class',
  content: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
      colors: {
        gray: {
          50: '#fafafa',
          100: '#f5f5f5',
          200: '#e5e5e5',
          300: '#d4d4d4',
          400: '#a3a3a3',
          500: '#737373',
          600: '#525252',
          700: '#404040',
          800: '#262626',
          900: '#171717',
        }
      }
    },
  },
  plugins: [],
};

```


### File: index.html

```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="https://ipa.parasyst.com/static/images/icon/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>LingoJourn - AI Journal</title>
    <script>
      // Prevent FOUC (Flash of Unstyled Content) for dark mode
      if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

```


### File: vite.config.test.js

```
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  server: {
    port: 3000,
    host: '0.0.0.0', // Add this line
    allowedHosts: ['ai-ndhu-lab', '134.208.6.129', '100.105.36.57']
  },
});

```


### File: vite.config.eg.js

```
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  server: {
    port: 7778,
    host: '0.0.0.0', // Add this line
    allowedHosts: ['ai-ndhu-lab', '134.208.6.129']
  },
});

```


### File: eslint.config.js

```
import { defineConfig, globalIgnores } from 'eslint/config'
import globals from 'globals'
import js from '@eslint/js'
import pluginVue from 'eslint-plugin-vue'
import skipFormatting from '@vue/eslint-config-prettier/skip-formatting'

export default defineConfig([
  {
    name: 'app/files-to-lint',
    files: ['**/*.{js,mjs,jsx,vue}'],
  },

  globalIgnores(['**/dist/**', '**/dist-ssr/**', '**/coverage/**']),

  {
    languageOptions: {
      globals: {
        ...globals.browser,
      },
    },
  },

  js.configs.recommended,
  ...pluginVue.configs['flat/essential'],
  skipFormatting,
])

```


### File: src/main.js

```
import { createApp } from 'vue';
import { createPinia } from 'pinia';
import App from './App.vue';
import router from './router';
import './style.css';

const app = createApp(App);
const pinia = createPinia();

app.use(pinia);
app.use(router);

app.mount('#app');
```


### File: src/App.vue

```
<template>
  <div v-if="authStore.isAuthenticated" :class="containerClass">
    <header v-if="!isWriterView" class="flex justify-between items-center mb-6 flex-shrink-0">
      <div class="flex items-center gap-3">
         <router-link to="/" class="hidden sm:flex items-center gap-3">
           <div class="bg-indigo-600 p-2 rounded-lg">
              <!-- Book Icon -->
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="text-white" fill="currentColor" viewBox="0 0 256 256"><path d="M208,24H88A48.05,48.05,0,0,0,40,72V208a48.05,48.05,0,0,0,48,48H208a8,8,0,0,0,8-8V32A8,8,0,0,0,208,24ZM88,240a32,32,0,0,1,0-64H200V240ZM200,40v96H88a32,32,0,0,1,0-64h8V40Z"></path></svg>
           </div>
           <h1 class="text-2xl font-bold text-indigo-600 dark:text-indigo-400">LingoJourn</h1>
         </router-link>
         <!-- Navigation Link to Learning Hub -->
         <!-- <nav class="ml-6">
           <router-link to="/learning-hub" class="text-sm font-semibold text-gray-600 hover:text-indigo-600 dark:text-gray-300 dark:hover:text-indigo-400 transition-colors">Learning Hub</router-link>
         </nav> -->
         <nav class="flex items-center gap-4">
           <router-link to="/learning-hub" class="text-sm font-semibold text-gray-600 hover:text-indigo-600 dark:text-gray-300 dark:hover:text-indigo-400 transition-colors">Learning Hub</router-link>
           <!-- Admin Link (Conditional) -->
           <router-link v-if="authStore.isAdmin" to="/admin" class="text-sm font-semibold text-gray-600 hover:text-indigo-600 dark:text-gray-300 dark:hover:text-indigo-400 transition-colors">Admin</router-link>
         </nav>
      </div>
      <div id="user-profile" class="flex items-center gap-4">
         <span class="text-sm font-medium text-gray-800 dark:text-gray-200">{{ authStore.user?.username }}</span>
         <!-- Dark Mode Toggle -->
         <button @click="uiStore.toggleDarkMode()" title="Toggle Dark Mode" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
            <svg v-if="uiStore.isDarkMode" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="text-yellow-400" viewBox="0 0 256 256"><path d="M128,80a48,48,0,1,0,48,48A48.05,48.05,0,0,0,128,80Zm0,80a32,32,0,1,1,32-32A32,32,0,0,1,128,160ZM208,128a8,8,0,0,1-8,8H184a8,8,0,0,1,0-16h16A8,8,0,0,1,208,128ZM128,48a8,8,0,0,1-8,8V72a8,8,0,0,1-16,0V56a8,8,0,0,1,8-8A8,8,0,0,1,128,48ZM72,120H56a8,8,0,0,0,0,16H72a8,8,0,0,0,0-16Zm109.66,58.34a8,8,0,0,0,5.65-2.34l11.32-11.32a8,8,0,0,0-11.32-11.32l-11.32,11.32a8,8,0,0,0,5.67,13.66ZM74.34,74.34l-11.32-11.32a8,8,0,1,0-11.32,11.32l11.32,11.32a8,8,0,0,0,11.32-11.32ZM181.66,74.34a8,8,0,0,0-11.32,0L159,85.66a8,8,0,0,0,11.32,11.32l11.32-11.32A8,8,0,0,0,181.66,74.34ZM85.66,159,74.34,170.34a8,8,0,0,0,11.32,11.32l11.32-11.32a8,8,0,1,0-11.32-11.32ZM128,208a8,8,0,0,1,8-8v16a8,8,0,0,1,0,16V200A8,8,0,0,1,128,208Z"></path></svg>
            <svg v-else xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="text-gray-600 dark:text-gray-300" viewBox="0 0 256 256"><path d="M216,144a88.08,88.08,0,0,1-88,88,88,88,0,0,1,0-176,87.27,87.27,0,0,1,64,24,8,8,0,0,1-11.31,11.31A71.32,71.32,0,0,0,128,72a72,72,0,0,0,0,144,71.32,71.32,0,0,0,52.69-21.31,8,8,0,0,1,11.31,11.31A87.27,87.27,0,0,1,216,144Z"></path></svg>
         </button>
         <button @click="authStore.logout()" title="Logout" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
            <!-- SignOut Icon -->
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="text-gray-600 dark:text-gray-300" viewBox="0 0 256 256"><path d="M112,216a8,8,0,0,1-8,8H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32h56a8,8,0,0,1,0,16H48V208h56A8,8,0,0,1,112,216Zm109.66-93.66-48-48a8,8,0,0,0-11.32,11.32L196.69,120H104a8,8,0,0,0,0,16h92.69l-34.35,34.34a8,8,0,0,0,11.32,11.32l48-48a8,8,0,0,0,0-11.32Z"></path></svg>
         </button>
      </div>
    </header>
    <router-view class="flex-grow overflow-hidden" />
  </div>
  <div v-else class="h-full">
    <router-view class="h-full"/>
  </div>
</template>

<script setup>
import { onMounted, computed } from 'vue';
import { useRoute } from 'vue-router';
import { useAuthStore } from './stores/authStore';
import { useUiStore } from './stores/uiStore';

const authStore = useAuthStore();
const uiStore = useUiStore();
const route = useRoute();

const isWriterView = computed(() => route.name === 'Writer');

const containerClass = computed(() => {
  if (isWriterView.value) {
    // For WriterView, use a full-height flex container for the immersive layout.
    return 'h-full flex flex-col';
  }
  // For all other views, use the original centered, padded layout.
  return 'max-w-4xl mx-auto p-4 md:p-6';
});

onMounted(() => {
  uiStore.initTheme();
});
</script>

```


### File: src/style.css

```
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html,
  body,
  #app {
    @apply h-full;
  }

  body {
    @apply bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300;
  }

  body.modal-open {
    @apply overflow-hidden;
  }
}

@layer utilities {
  /* Custom scrollbar styles for Webkit-based browsers (Chrome, Safari, Edge) */
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-600 rounded-full;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400 dark:bg-gray-500;
  }
}

```


### File: src/views/TopicDetailView.vue

```
<template>
  <main id="topic-detail-view" class="fade-in">
    <!-- Header -->
    <div class="mb-6">
      <router-link to="/learning-hub" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100 font-medium flex items-center gap-2 mb-4">
         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path></svg>
        Back to Learning Hub
      </router-link>
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ progressStore.currentTopicDetails?.topic_name || 'Loading Topic...' }}</h2>
        <p v-if="progressStore.currentTopicDetails" class="text-gray-500 dark:text-gray-400 mt-1">
          A review of your {{ progressStore.currentTopicDetails.error_count }} unique error{{ progressStore.currentTopicDetails.error_count > 1 ? 's' : '' }} in this area.
        </p>
      </div>
    </div>

    <!-- Loading and Error States -->
    <div v-if="progressStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading your error history...</p>
    </div>
    <div v-else-if="progressStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ progressStore.error }}</p>
    </div>

    <!-- Error Details List -->
    <div v-else-if="progressStore.currentTopicDetails?.errors.length > 0" class="space-y-4">
      <ErrorDetailCard 
        v-for="(error, index) in progressStore.currentTopicDetails.errors"
        :key="index"
        :error="error"
      />
    </div>
    <div v-else class="text-center py-10 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
        <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200">No errors found!</h4>
        <p class="text-gray-500 dark:text-gray-400">There's no specific error history to show for this topic.</p>
    </div>
  </main>
</template>

<script setup>
import { onMounted, watch } from 'vue';
import { useRoute } from 'vue-router';
import { useProgressStore } from '../stores/progressStore';
import ErrorDetailCard from '../components/ErrorDetailCard.vue';

const route = useRoute();
const progressStore = useProgressStore();
const topicId = route.params.topic_id;

const loadDetails = () => {
  if (topicId) {
    progressStore.fetchTopicDetails(topicId);
  }
};

onMounted(loadDetails);

// Watch for route changes if the user navigates between topics
watch(() => route.params.topic_id, (newId) => {
  if (newId) {
    loadDetails();
  }
});
</script>

```


### File: src/views/SignupView.vue

```
<template>
  <div class="flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900">
    <main class="w-full max-w-md p-8 space-y-6 bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-200 dark:border-gray-700">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-indigo-600 dark:text-indigo-400">Create Your Account</h1>
        <p class="text-gray-500 dark:text-gray-400">Join LingoJourn to start your English learning journey</p>
      </div>
      <form @submit.prevent="handleSignup" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="realname" class="text-sm font-medium text-gray-700 dark:text-gray-300">Real Name</label>
            <input
              v-model="realname"
              type="text"
              id="realname"
              required
              class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
              placeholder="John Doe"
            />
          </div>
          <div>
            <label for="student_id" class="text-sm font-medium text-gray-700 dark:text-gray-300">Student ID</label>
            <input
              v-model="student_id"
              type="text"
              id="student_id"
              required
              class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
              placeholder="Your ID"
            />
          </div>
        </div>
        <div>
          <label for="username" class="text-sm font-medium text-gray-700 dark:text-gray-300">Username</label>
          <input
            v-model="username"
            type="text"
            id="username"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="yourname"
          />
        </div>
        <div>
          <label for="email" class="text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input
            v-model="email"
            type="email"
            id="email"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="you@example.com"
          />
        </div>
        <div>
          <label for="password" class="text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
          <input
            v-model="password"
            type="password"
            id="password"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="••••••••"
          />
        </div>
         <div v-if="authStore.error" class="text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/50 p-3 rounded-lg">
          {{ authStore.error }}
        </div>
        <div v-if="successMessage" class="text-sm text-green-700 dark:text-green-300 bg-green-50 dark:bg-green-900/50 p-3 rounded-lg">
          {{ successMessage }}
        </div>
        <button
          type="submit"
          :disabled="authStore.isLoading"
          class="w-full py-2 px-4 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-indigo-400 dark:disabled:bg-indigo-800 transition-colors"
        >
          {{ authStore.isLoading ? 'Creating Account...' : 'Sign Up' }}
        </button>
      </form>
       <p class="text-center text-sm text-gray-600 dark:text-gray-400">
        Already have an account?
        <router-link to="/login" class="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
          Log In
        </router-link>
      </p>
    </main>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useAuthStore } from '../stores/authStore';

const authStore = useAuthStore();
// --- MODIFIED SECTION START ---
const realname = ref('');
const student_id = ref('');
// --- MODIFIED SECTION END ---
const username = ref('');
const email = ref('');
const password = ref('');
const successMessage = ref('');

const getGroupFromPort = () => {
  const port = window.location.port;
  if (port === '7779') {
    return 'CG';
  } else if (port === '7778') {
    return 'EG';
  }
  else{
    const hostname = window.location.hostname;
    if (hostname === 'ti.parasyst.com') {
      return 'CG';
    } else if (hostname === 'it.parasyst.com') {
      return 'EG';
    }
    return 'TEST';
  }
};

const handleSignup = async () => {
  successMessage.value = '';
  const group = getGroupFromPort(); 
  await authStore.signup({ 
    // --- MODIFIED SECTION START ---
    realname: realname.value,
    student_id: student_id.value,
    group: group,
    // --- MODIFIED SECTION END ---
    username: username.value, 
    email: email.value, 
    password: password.value 
  });

  if (!authStore.error) {
    successMessage.value = 'Account created successfully! You can now log in.';
    // Clear form fields
    // --- MODIFIED SECTION START ---
    realname.value = '';
    student_id.value = '';
    // --- MODIFIED SECTION END ---
    username.value = '';
    email.value = '';
    password.value = '';
  }
};
</script>
```


### File: src/views/DashboardView.vue

```
<template>
  <main id="dashboard-view" class="fade-in">
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Welcome Back, {{ authStore.user?.username }}!</h2>
          <p class="text-gray-500 dark:text-gray-400">Ready to practice your English today?</p>
        </div>
        <div class="flex items-center gap-3 bg-orange-100 dark:bg-orange-900/50 text-orange-700 dark:text-orange-300 p-3 rounded-lg">
          <!-- Fire Icon -->
          <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 256 256">
            <path d="M221.5,145.45C221.5,184.12,190,224,150,224s-72-39.88-72-78.55c0-20.93,12.35-46,29.9-71.55,14.28-20.81,28.2-38,33.43-45.11a8,8,0,0,1,13.34,0c5.23,7.07,19.15,24.3,33.43,45.11C209.15,99.44,221.5,124.52,221.5,145.45ZM152,80a16,16,0,1,0-16,16A16,16,0,0,0,152,80Z"></path>
          </svg>
          <div>
            <div class="font-bold text-lg">{{ progressStore.streak }} Day Streak</div>
            <p class="text-sm">Keep it up!</p>
          </div>
        </div>
      </div>
    </div>

    <!-- New Progress Summary Card -->
    <!-- <ProgressSummaryCard 
      :summary="progressStore.summary"
      :is-loading="progressStore.isLoading"
      :error="progressStore.error"
    /> -->

    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">Your Journal Entries</h3>
      <router-link
        to="/writer"
        class="bg-indigo-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center gap-2"
      >
        <!-- Plus Icon -->
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z"></path></svg>
        New Entry
      </router-link>
    </div>

    <!-- Loading and Error States -->
    <div v-if="journalStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading your journals...</p>
    </div>
    <div v-else-if="journalStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ journalStore.error }}</p>
    </div>

    <!-- Journal List -->
    <div v-else-if="journalStore.journals.length > 0" id="journal-list" class="space-y-4">
       <JournalCard
         v-for="journal in journalStore.journals"
         :key="journal.id"
         :journal="journal"
       />
    </div>
    <div v-else class="text-center py-10 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
        <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200">No entries yet!</h4>
        <p class="text-gray-500 dark:text-gray-400">Click "New Entry" to start your first journal.</p>
    </div>
  </main>
</template>

<script setup>
import { onMounted } from 'vue';
import { useAuthStore } from '../stores/authStore';
import { useJournalStore } from '../stores/journalStore';
import { useProgressStore } from '../stores/progressStore'; // Import progress store
import JournalCard from '../components/JournalCard.vue';
// import ProgressSummaryCard from '../components/ProgressSummaryCard.vue'; // Import new component

const authStore = useAuthStore();
const journalStore = useJournalStore();
const progressStore = useProgressStore(); // Instantiate progress store

// Fetch data when the component is first mounted
onMounted(() => {
  journalStore.fetchJournals();
  // progressStore.fetchProgressSummary();
  progressStore.fetchStreak(); // Fetch streak data
});
</script>

```


### File: src/views/WriterView.vue

```
<template
  ><main
    id="writer-view"
    class="fade-in flex flex-col h-full w-full bg-white dark:bg-gray-800"
  >
    <!-- Hidden file input for image uploads -->
    <input
      ref="imageInput"
      type="file"
      @change="handleImageUpload"
      multiple
      accept="image/*"
      class="hidden"
    />
    <!-- Fullscreen Image Carousel -->
    <ImageCarousel
      :show="isCarouselVisible"
      :images="carouselImages"
      :start-index="carouselStartIndex"
      @close="isCarouselVisible = false"
    />
    <!-- ================================== -->
    <!--  1. NEW COMPACT & ANIMATED HEADER  -->
    <!-- ================================== -->
    <div
      class="flex-shrink-0 p-2 flex justify-between items-center border-b border-gray-200 dark:border-gray-700"
    >
      <!-- Left Section: Navigation, Title, and Status -->
      <div class="flex items-center gap-2">
        <router-link
          to="/"
          title="Back to Dashboard"
          class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            fill="currentColor"
            viewBox="0 0 256 256"
          >
            <path
              d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"
            ></path>
          </svg>
        </router-link>
        <div>
          <h2
            class="text-sm font-bold text-gray-900 dark:text-gray-100 truncate"
          >
            {{ currentJournal?.title || 'New Journal Entry' }}
          </h2>
          <div
            class="text-xs text-gray-500 dark:text-gray-400 flex items-center gap-2"
          >
            <span>{{ displayDate }}</span>
            <span class="mx-1">·</span>
            <span class="hidden sm:inline"
              >Status: <strong>{{ statusText }}</strong></span
            >
          </div>
        </div>
      </div>

      <!-- Right Section: Compact Phase Indicator -->
      <div class="flex items-center">
        <template v-for="(phase, index) in phases" :key="phase.id">
          <div class="flex items-center">
            <!-- Connector Line (appears after the first item) -->
            <div
              v-if="index > 0"
              class="w-6 h-0.5 rounded transition-colors"
              :class="getPhaseLineClass(phase.id)"
            ></div>
            <!-- Phase Circle with Tooltip -->
            <div
              @click="togglePhaseDescription(phase.id)"
              class="group relative cursor-pointer"
              title="Click to toggle phase description"
            >
              <div
                class="w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold transition-all duration-300"
                :class="getPhaseClass(phase.id)"
              >
                <svg
                  v-if="phase.id === 4"
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  fill="currentColor"
                  viewBox="0 0 256 256"
                >
                  <path
                    d="M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z"
                  ></path></svg><span v-else>{{ phase.id }}</span>
              </div>
              <span
                class="absolute top-full mt-2 left-1/2 -translate-x-1/2 w-max opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs font-semibold rounded-md py-1 px-2 pointer-events-none z-10"
              >
                {{ phase.name }}
              </span>
            </div>
          </div>
        </template>
      </div>
    </div>

    <!-- ======================= -->
    <!--   2. MAIN CONTENT AREA  -->
    <!-- ======================= -->
    <div class="flex-grow overflow-hidden relative">
      <!-- A. Unified Layout for Scaffolding & Writing -->
      <div
        v-if="currentPhase === 'scaffolding' || currentPhase === 'writing'"
        class="h-full flex flex-col p-6 sm:p-8 gap-6"
      >
        <!-- Phase Banners -->
        <transition name="banner-fade">
          <div
            v-if="currentPhase === 'scaffolding' && isDescriptionVisible"
            class="relative flex-shrink-0 bg-indigo-50 dark:bg-indigo-900/50 p-4 rounded-lg"
          >
            <h3 class="font-bold text-indigo-800 dark:text-indigo-200">
              Phase 1: Let's build an outline!
            </h3>
            <p
              class="text-sm text-indigo-700 dark:text-indigo-300 mt-1 pr-8"
            >
              Answer Lingo's questions, write key points, or upload an image to get started.
            </p>
            <button
              @click="togglePhaseDescription()"
              class="absolute bottom-2 right-2 p-1 rounded-full hover:bg-indigo-100 dark:hover:bg-indigo-800/50 transition-colors"
              title="Toggle description"
            >
              <svg
                v-if="isDescriptionVisible"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="text-indigo-600 dark:text-indigo-300"
                viewBox="0 0 256 256"
              >
                <path
                  d="M213.66,165.66a8,8,0,0,1-11.32,0L128,91.31,53.66,165.66a8,8,0,0,1-11.32-11.32l80-80a8,8,0,0,1,11.32,0l80,80A8,8,0,0,1,213.66,165.66Z"
                ></path></svg><svg
                v-else
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="text-indigo-600 dark:text-indigo-300"
                viewBox="0 0 256 256"
              >
                <path
                  d="M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80a8,8,0,0,1,11.32-11.32L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z"
                ></path>
              </svg>
            </button>
          </div>
        </transition>
        <transition name="banner-fade">
          <div
            v-if="currentPhase === 'writing' && isDescriptionVisible"
            class="relative flex-shrink-0 bg-green-50 dark:bg-green-900/50 p-4 rounded-lg"
          >
            <h3 class="font-bold text-green-800 dark:text-green-200">
              Phase 2: Write your draft
            </h3>
            <p class="text-sm text-green-700 dark:text-green-300 mt-1 pr-8">
              Use your outline to write your journal entry. Your writing
              partner, Lingo, is here to help if you get stuck.
            </p>
            <button
              @click="togglePhaseDescription()"
              class="absolute bottom-2 right-2 p-1 rounded-full hover:bg-green-100 dark:hover:bg-green-800/50 transition-colors"
              title="Toggle description"
            >
              <svg
                v-if="isDescriptionVisible"
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="text-green-600 dark:text-green-300"
                viewBox="0 0 256 256"
              >
                <path
                  d="M213.66,165.66a8,8,0,0,1-11.32,0L128,91.31,53.66,165.66a8,8,0,0,1-11.32-11.32l80-80a8,8,0,0,1,11.32,0l80,80A8,8,0,0,1,213.66,165.66Z"
                ></path></svg><svg
                v-else
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="text-green-600 dark:text-green-300"
                viewBox="0 0 256 256"
              >
                <path
                  d="M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80a8,8,0,0,1,11.32-11.32L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z"
                ></path>
              </svg>
            </button>
          </div>
        </transition>

        <!-- Mobile View Switcher (Tabs) -->
        <div
          class="md:hidden flex-shrink-0 flex border border-gray-300 dark:border-gray-600 rounded-lg p-1 bg-gray-100 dark:bg-gray-900"
        >
          <button
            @click="mobileView = 'main'"
            :class="[
              mobileView === 'main'
                ? 'bg-indigo-600 text-white shadow'
                : 'text-gray-600 dark:text-gray-300',
              'flex-1 p-2 rounded-md font-semibold text-sm transition-all duration-200 ease-in-out',
            ]"
          >
            <span v-if="currentPhase === 'scaffolding'">📝 Outline</span
            ><span v-else>📝 Writer</span>
          </button>
          <button
            @click="mobileView = 'chat'"
            :class="[
              mobileView === 'chat'
                ? 'bg-indigo-600 text-white shadow'
                : 'text-gray-600 dark:text-gray-300',
              'flex-1 p-2 rounded-md font-semibold text-sm transition-all duration-200 ease-in-out',
            ]"
          >
            🤖 Lingo Chat
          </button>
        </div>

        <!-- Main Grid for Desktop & Mobile content -->
        <div class="flex-grow overflow-hidden grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Left Column: Outline / Writer -->
          <div
            class="relative flex flex-col gap-4 min-h-0"
            :class="{ 'hidden md:flex': mobileView !== 'main' }"
          >
            <!-- NEW: Image Stack Display -->
            <ImageStack
              v-if="currentJournal?.images?.length > 0"
              :images="currentJournal.images"
              @stack-clicked="openCarousel(currentJournal.images[0].id)"
            />
            <!-- Scaffolding View -->
            <template v-if="currentPhase === 'scaffolding'">
              <div
                class="flex-shrink-0 space-y-2 text-sm text-gray-600 dark:text-gray-300"
              >
                <p><strong>Guiding questions:</strong></p>
                <ul
                  class="list-disc list-inside bg-gray-50 dark:bg-gray-700/50 p-3 rounded-md"
                >
                  <li>What was the most memorable part of your day?</li>
                  <li>Did you learn or try something new?</li>
                </ul>
              </div>
              <textarea
                v-model="outlineContent"
                placeholder="Write down your main ideas or key points here..."
                class="flex-grow w-full p-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:outline-none transition bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 resize-none"
              >
              </textarea>
            </template>
            <!-- Writing View -->
            <template v-if="currentPhase === 'writing'">
              <div
                class="flex-shrink-0 bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg border dark:border-gray-700"
              >
                <h4 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">
                  Your Outline
                </h4>
                <div
                  class="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap max-h-24 overflow-y-auto custom-scrollbar"
                >
                  {{ outlineContent || 'No outline was created.' }}
                </div>
              </div>
              <textarea
                v-model="content"
                class="flex-grow w-full p-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:outline-none transition bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 resize-none"
              ></textarea>
            </template>
          </div>

          <!-- Right Column: UNIFIED CHAT PANEL -->
          <div
            class="flex flex-col min-h-0"
            :class="{ 'hidden md:flex': mobileView !== 'chat' }"
          >
            <div
              class="flex-grow w-full border border-gray-300 dark:border-gray-600 rounded-lg flex flex-col bg-gray-50 dark:bg-gray-900 overflow-hidden"
            >
              <div
                class="p-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between flex-shrink-0"
              >
                <div class="flex items-center gap-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    class="text-indigo-500 dark:text-indigo-400"
                    fill="currentColor"
                    viewBox="0 0 256 256"
                  >
                    <path
                      d="M128,24A104,104,0,0,0,36.18,176.88L24.83,212.3a16,16,0,0,0,20.55,18.85l37.81-12.6A104,104,0,1,0,128,24Zm0,192a88.1,88.1,0,0,1-45.43-13.25a8,8,0,0,0-9-1.33L40,211.52l9.9-32.68a8,8,0,0,0-1.12-8.52A88,88,0,1,1,128,216Z"
                    ></path>
                  </svg>
                  <h4 class="font-semibold text-gray-800 dark:text-gray-200">
                    Lingo Chat
                  </h4>
                </div>
                <!-- Controls: Camera button and correction toggle -->
                <div class="flex items-center gap-3">
                  <button
                    @click="triggerImageUpload"
                    :disabled="journalStore.isUploading || currentPhase !== 'scaffolding'"
                    title="Add Image from Device"
                    class="p-1.5 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="text-gray-600 dark:text-gray-300" viewBox="0 0 256 256"><path d="M208,56H180.28L166.65,35.56A16,16,0,0,0,152.28,24H103.72a16,16,0,0,0-14.37,11.56L75.72,56H48A24,24,0,0,0,24,80V192a24,24,0,0,0,24,24H208a24,24,0,0,0,24-24V80A24,24,0,0,0,208,56Zm16,136a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V80a8,8,0,0,1,8-8h32a8,8,0,0,0,7.18-4.44l13.63-20.44a.18.18,0,0,1,0-.05H152.28a.18.18,0,0,1,0,.05l13.63,20.44A8,8,0,0,0,173.09,72H208a8,8,0,0,1,8,8ZM128,88a48,48,0,1,0,48,48A48.05,48.05,0,0,0,128,88Zm0,80a32,32,0,1,1,32-32A32,32,0,0,1,128,168Z"></path></svg>
                  </button>
                  <label for="correction-toggle" class="flex items-center cursor-pointer">
                    <span class="mr-2 text-xs text-gray-500 dark:text-gray-400">Correct</span>
                    <div class="relative">
                      <input
                        type="checkbox"
                        id="correction-toggle"
                        class="sr-only"
                        v-model="isCorrectionModeEnabled"
                      />
                      <div class="block bg-gray-200 dark:bg-gray-600 w-10 h-6 rounded-full"></div>
                      <div class="dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform"></div>
                    </div>
                  </label>
                </div>
              </div>
              <div
                ref="chatContainer"
                class="flex-grow p-4 overflow-y-auto space-y-4 custom-scrollbar"
              >
                <!-- Existing messages -->
                <template v-for="message in currentJournal?.chat_messages" :key="message.id">
                  <!-- Conversation Text Message -->
                  <div v-if="message.message_type === 'conversation'" class="flex" :class="message.sender === 'user' ? 'justify-end' : 'justify-start'">
                    <div class="p-3 rounded-lg max-w-xs break-words" :class="message.sender === 'user' ? 'bg-indigo-500 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100'">
                      <p class="text-sm">{{ message.message_text }}</p>
                    </div>
                  </div>
                  <!-- Image Message -->
                  <div v-else-if="message.message_type === 'image' && message.image" class="flex" :class="message.sender === 'user' ? 'justify-end' : 'justify-start'">
                     <ImageChatMessage 
                        :image="message.image" 
                        :description="message.message_text"
                        @image-clicked="openCarousel(message.image.id)" />
                  </div>
                  <!-- Feedback Message -->
                  <div v-else-if="message.message_type === 'feedback'" class="flex justify-start">
                    <ChatFeedbackCard :message="message" />
                  </div>
                </template>
                 <!-- Loading Indicators -->
                <div v-if="aiStore.isLoading" class="flex justify-start">
                  <div class="bg-gray-200 dark:bg-gray-700 p-3 rounded-lg animate-pulse">
                    <p class="text-sm text-gray-400">...</p>
                  </div>
                </div>
                <div v-if="journalStore.isUploading" class="flex justify-start">
                    <div class="p-3 rounded-lg max-w-xs break-words bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 italic animate-pulse">
                      <p class="text-sm">Uploading image...</p>
                    </div>
                </div>
              </div>
              <div
                class="p-2 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 flex-shrink-0"
              >
                <input
                  v-model="newMessage"
                  @keyup.enter="sendMessage"
                  :disabled="aiStore.isLoading || !currentJournal"
                  type="text"
                  :placeholder="chatPlaceholder"
                  class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:outline-none disabled:bg-gray-100 dark:disabled:bg-gray-700 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- B. Standard scrolling container for other phases -->
      <div
        v-if="currentPhase !== 'scaffolding' && currentPhase !== 'writing'"
        class="absolute inset-0 h-full overflow-y-auto custom-scrollbar"
      >
        <!-- Phase 3: Evaluation -->
        <div v-if="currentPhase === 'evaluation'" class="p-8">
          <transition name="banner-fade">
            <div
              v-if="isDescriptionVisible"
              class="relative bg-rose-50 dark:bg-rose-900/50 p-4 rounded-lg mb-4"
            >
              <h3 class="font-bold text-rose-800 dark:text-rose-200">
                Phase 3: Review Your Evaluation
              </h3>
              <p class="text-sm text-rose-700 dark:text-rose-300 mt-1 pr-8">
                Review the AI's suggestions below to improve your grammar,
                vocabulary, and style. Your original text is highlighted with
                suggestions.
              </p>
              <button
                @click="togglePhaseDescription()"
                class="absolute bottom-2 right-2 p-1 rounded-full hover:bg-rose-100 dark:hover:bg-rose-800/50 transition-colors"
                title="Toggle description"
              >
                <svg
                  v-if="isDescriptionVisible"
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  fill="currentColor"
                  class="text-rose-600 dark:text-rose-300"
                  viewBox="0 0 256 256"
                >
                  <path
                    d="M213.66,165.66a8,8,0,0,1-11.32,0L128,91.31,53.66,165.66a8,8,0,0,1-11.32-11.32l80-80a8,8,0,0,1,11.32,0l80,80A8,8,0,0,1,213.66,165.66Z"
                  ></path></svg><svg
                  v-else
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  fill="currentColor"
                  class="text-rose-600 dark:text-rose-300"
                  viewBox="0 0 256 256"
                >
                  <path
                    d="M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80a8,8,0,0,1,11.32-11.32L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z"
                  ></path>
                </svg>
              </button>
            </div>
          </transition>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="md:col-span-2">
              <h4 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">
                Your Corrected Text
              </h4>
              <div
                v-html="highlightedContent"
                class="w-full h-[30rem] p-4 border border-gray-300 dark:border-gray-600 rounded-lg overflow-y-auto bg-gray-50 dark:bg-gray-700/50 whitespace-pre-wrap custom-scrollbar"
              ></div>
            </div>
            <div class="md:col-span-1">
              <h4 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">
                Suggestions
              </h4>
              <div id="ai-feedback-section" class="space-y-3">
                <div v-if="aiStore.isLoading" class="text-center py-4">
                  <p class="text-gray-500 dark:text-gray-400 animate-pulse">
                    Analyzing your text...
                  </p>
                </div>
                <div
                  v-else-if="aiStore.error"
                  class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg"
                >
                  <p>{{ aiStore.error }}</p>
                </div>
                <div v-else-if="aiStore.feedback.length > 0">
                  <AIFeedbackCard
                    v-for="(item, index) in aiStore.feedback"
                    :key="index"
                    :feedback-item="item"
                    :is-applied="appliedSuggestions.includes(item.incorrect_phrase)"
                    @apply-suggestion="applySuggestion"
                  />
                </div>
                <div
                  v-else
                  class="text-center py-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg"
                >
                  <p class="text-gray-600 dark:text-gray-300 font-semibold">
                    Great job!
                  </p>
                  <p class="text-gray-500 dark:text-gray-400">
                    The AI didn't find any specific errors to correct.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Phase 4: Completed -->
        <div v-if="currentPhase === 'completed'" class="p-8 text-center">
          <div class="max-w-md mx-auto">
            <div
              class="bg-green-100 text-green-700 w-16 h-16 rounded-full flex items-center justify-center mx-auto"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="40"
                height="40"
                fill="currentColor"
                viewBox="0 0 256 256"
              >
                <path
                  d="M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z"
                ></path>
              </svg>
            </div>
            <h3 class="text-2xl font-bold mt-4 text-gray-900 dark:text-gray-100">
              Journal Completed!
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mt-2">
              Excellent work! You've finished this entry. All your learning
              points have been saved to your progress hub.
            </p>
            <div class="mt-6">
              <div
                class="relative bg-gray-50 dark:bg-gray-700/50 p-4 rounded-lg border dark:border-gray-700 text-left"
              >
                <!-- NEW: Image Stack Display -->
                <ImageStack
                  v-if="currentJournal?.images?.length > 0"
                  :images="currentJournal.images"
                  @stack-clicked="openCarousel(currentJournal.images[0].id)"
                />
                <h4 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">
                  Your Final Entry
                </h4>
                <div
                  class="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap"
                >
                  {{ content }}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- ======================= -->
    <!-- 3. ACTION FOOTER        -->
    <!-- ======================= -->
    <div
      class="flex-shrink-0 p-4 border-t border-gray-200 dark:border-gray-700"
    >
      <div v-if="currentPhase === 'scaffolding'" class="flex justify-end">
        <button
          @click="moveToPhase('writing')"
          class="w-full sm:w-auto bg-indigo-600 text-white font-semibold px-5 py-1.5 text-sm rounded-lg hover:bg-indigo-700 transition-colors"
        >
          Start Writing
        </button>
      </div>

      <div v-if="currentPhase === 'writing'" class="flex justify-end">
        <button
          @click="moveToPhase('evaluation')"
          class="w-full sm:w-auto bg-teal-500 text-white font-semibold px-5 py-1.5 text-sm rounded-lg hover:bg-teal-600 transition-colors"
        >
          Evaluate Writing
        </button>
      </div>

      <div
        v-if="currentPhase === 'evaluation'"
        class="flex flex-col sm:flex-row justify-between items-center gap-4"
      >
        <button
          @click="saveJournal()"
          :disabled="journalStore.isLoading"
          class="w-full sm:w-auto bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 font-semibold px-4 py-1.5 text-sm rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors"
        >
          {{ journalStore.isLoading ? 'Saving...' : 'Save Changes' }}
        </button>
        <div class="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
          <button
            @click="moveToPhase('writing')"
            class="w-full sm:w-auto bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 font-semibold px-4 py-1.5 text-sm rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors"
          >
            Back to Writing
          </button>
          <button
            @click="moveToPhase('completed')"
            :disabled="!allSuggestionsApplied"
            class="w-full sm:w-auto bg-green-600 text-white font-semibold px-5 py-1.5 text-sm rounded-lg hover:bg-green-700 transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600 disabled:cursor-not-allowed"
          >
            Mark as Complete
          </button>
        </div>
      </div>

      <div v-if="currentPhase === 'completed'" class="flex justify-center gap-4">
        <router-link
          to="/"
          class="bg-indigo-600 text-white font-semibold px-5 py-1.5 text-sm rounded-lg hover:bg-indigo-700 transition-colors"
        >
          Back to Dashboard
        </router-link>
      </div>
    </div>
  </main>
</template>

<script setup>
import { ref, computed, onMounted, watch, nextTick, onUnmounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useJournalStore } from '../stores/journalStore';
import { useAiStore } from '../stores/aiStore';
import { format } from 'date-fns';
import AIFeedbackCard from '../components/AIFeedbackCard.vue';
import ChatFeedbackCard from '../components/ChatFeedbackCard.vue';
import ImageChatMessage from '../components/ImageChatMessage.vue';
import ImageCarousel from '../components/ImageCarousel.vue';
import ImageStack from '../components/ImageStack.vue'; // New import

const route = useRoute();
const router = useRouter();
const journalStore = useJournalStore();
const aiStore = useAiStore();

const currentJournal = computed(() =>
  journalStore.getJournalByDate(route.params.date)
);
const currentPhase = computed(
  () => currentJournal.value?.writing_phase || 'scaffolding'
);

// --- NEW STATE FOR IMAGES ---
const imageInput = ref(null);
const isCarouselVisible = ref(false);
const carouselImages = ref([]);
const carouselStartIndex = ref(0);

const mobileView = ref('main');
const isCorrectionModeEnabled = ref(true);

const content = ref('');
const outlineContent = ref('');
const statusText = ref('Saved');
const newMessage = ref('');
const chatContainer = ref(null);
const appliedSuggestions = ref([]);
const saveTimeout = ref(null);
const isDescriptionVisible = ref(true);
const descriptionTimeout = ref(null);

const phases = ref([
  { id: 1, name: 'Scaffolding' },
  { id: 2, name: 'Writing' },
  { id: 3, name: 'Evaluation' },
  { id: 4, name: 'Completed' },
]);

const displayDate = computed(() => {
  if (currentJournal.value) {
    return journalStore.formatDisplayDate(currentJournal.value.journal_date);
  }
  return format(new Date(), 'MMMM d, yyyy');
});

const chatPlaceholder = computed(() => {
  if (currentPhase.value === 'scaffolding') {
    return 'Not sure what to write about? Chat here!';
  }
  if (currentPhase.value === 'writing') {
    return "Ask for help, e.g., 'What should I write next?'";
  }
  return 'Type your message...';
});

// --- NEW IMAGE HANDLING METHODS ---
const triggerImageUpload = () => {
  imageInput.value?.click();
};

const handleImageUpload = async (event) => {
  if (!event.target.files || !currentJournal.value) return;
  const files = Array.from(event.target.files);
  for (const file of files) {
    await journalStore.uploadImage(currentJournal.value.journal_date, file);
  }
  // Clear the input value to allow uploading the same file again
  event.target.value = '';
};

const openCarousel = (imageId) => {
  if (!currentJournal.value?.images) return;
  carouselImages.value = currentJournal.value.images;
  const index = carouselImages.value.findIndex(img => img.id === imageId);
  carouselStartIndex.value = index >= 0 ? index : 0;
  isCarouselVisible.value = true;
};

const loadJournalData = async () => {
  const date = route.params.date;
  if (date) {
    await journalStore.fetchJournalByDate(date);
  } else {
    const today = format(new Date(), 'yyyy-MM-dd');
    const existing = journalStore.getJournalByDate(today);
    if (!existing) {
      const newJournal = await journalStore.createJournal('');
      if (newJournal) {
        router.replace(`/writer/${newJournal.journal_date}`);
      }
    } else {
      router.replace(`/writer/${today}`);
    }
  }
};

onMounted(loadJournalData);

onUnmounted(() => {
  if (saveTimeout.value) {
    clearTimeout(saveTimeout.value);
  }
  if (descriptionTimeout.value) {
    clearTimeout(descriptionTimeout.value);
  }
});

const scrollToBottom = () => {
  nextTick(() => {
    if (chatContainer.value) {
      chatContainer.value.scrollTop = chatContainer.value.scrollHeight;
    }
  });
};

const startDescriptionTimer = () => {
  if (descriptionTimeout.value) clearTimeout(descriptionTimeout.value);
  isDescriptionVisible.value = true;
  descriptionTimeout.value = setTimeout(() => {
    isDescriptionVisible.value = false;
  }, 30000); // 30 seconds
};

watch(
  currentJournal,
  (newJournal, oldJournal) => {
    if (newJournal) {
      content.value = newJournal.content || '';
      outlineContent.value = newJournal.outline_content || '';
      appliedSuggestions.value = [];

      if (
        newJournal.writing_phase === 'evaluation' &&
        (!aiStore.feedback.length || aiStore.error)
      ) {
        aiStore.getFeedback(newJournal.journal_date, newJournal.content);
      }
      scrollToBottom();

      if (!oldJournal || newJournal.writing_phase !== oldJournal.writing_phase) {
        startDescriptionTimer();
      }
    }
  },
  { deep: true, immediate: true }
);

watch(
  () => currentJournal.value?.chat_messages.length,
  () => {
    scrollToBottom();
  }
);


watch(content, (newValue, oldValue) => {
  if (currentPhase.value === 'writing' && newValue !== oldValue) {
    statusText.value = 'Saving...';
    if (saveTimeout.value) clearTimeout(saveTimeout.value);
    saveTimeout.value = setTimeout(() => {
      saveJournal(true);
    }, 5000);
  }
});

const saveJournal = async (showStatus = true) => {
  if (!currentJournal.value) return;
  const payload = {
    content: content.value,
    outline_content: outlineContent.value,
  };
  const savedJournal = await journalStore.updateJournal(
    currentJournal.value.journal_date,
    payload
  );
  if (showStatus) {
    statusText.value = savedJournal ? 'All changes saved!' : 'Error saving.';
  }
};

const moveToPhase = async (phase) => {
  if (!currentJournal.value) return;
  if (saveTimeout.value) clearTimeout(saveTimeout.value);
  await saveJournal(false);
  await journalStore.updateJournalPhase(currentJournal.value.journal_date, phase);
};

const sendMessage = async () => {
  if (!newMessage.value.trim() || !currentJournal.value || aiStore.isLoading) return;
  if (saveTimeout.value) clearTimeout(saveTimeout.value);
  await saveJournal(false);

  const messageToSend = newMessage.value;
  newMessage.value = '';

  aiStore.chatWithAI(
    currentJournal.value.journal_date,
    messageToSend,
    isCorrectionModeEnabled.value
  );
};

const highlightedContent = computed(() => {
  if (currentPhase.value !== 'evaluation' || !aiStore.feedback.length) {
    return content.value;
  }
  let tempContent = content.value;
  const sortedFeedback = [...aiStore.feedback].sort(
    (a, b) => b.incorrect_phrase.length - a.incorrect_phrase.length
  );
  sortedFeedback.forEach((item) => {
    if (!appliedSuggestions.value.includes(item.incorrect_phrase)) {
      const regex = new RegExp(escapeRegExp(item.incorrect_phrase), 'g');
      tempContent = tempContent.replace(
        regex,
        `<span class="bg-yellow-200 dark:bg-yellow-400/30 rounded px-1">${item.incorrect_phrase}</span>`
      );
    }
  });
  return tempContent;
});

const applySuggestion = (feedbackItem) => {
  content.value = content.value.replace(
    feedbackItem.incorrect_phrase,
    feedbackItem.suggestion
  );
  appliedSuggestions.value.push(feedbackItem.incorrect_phrase);
};

const allSuggestionsApplied = computed(() => {
  if (!aiStore.feedback || aiStore.feedback.length === 0) return true;
  return appliedSuggestions.value.length >= aiStore.feedback.length;
});

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

const phaseMap = { scaffolding: 1, writing: 2, evaluation: 3, completed: 4 };

const togglePhaseDescription = (phaseId) => {
  if (phaseId && phaseMap[currentPhase.value] !== phaseId) return;
  if (isDescriptionVisible.value) {
    isDescriptionVisible.value = false;
    if (descriptionTimeout.value) clearTimeout(descriptionTimeout.value);
  } else {
    startDescriptionTimer();
  }
};

const getPhaseClass = (phaseId) => {
  const phaseValue = phaseMap[currentPhase.value];
  if (phaseValue > phaseId) return 'bg-green-500 text-white scale-100';
  if (phaseValue === phaseId) return 'bg-indigo-600 text-white scale-110 shadow-lg';
  return 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 scale-100';
};

const getPhaseLineClass = (phaseId) => {
  if (phaseMap[currentPhase.value] >= phaseId) return 'bg-green-500';
  return 'bg-gray-200 dark:bg-gray-700';
};
</script>

<style>
#correction-toggle:checked ~ .dot {
  transform: translateX(100%);
  background-color: #4f46e5;
}
#correction-toggle:checked ~ .block {
  background-color: #c7d2fe;
}
.dark #correction-toggle:checked ~ .block {
  background-color: #3730a3;
}
.banner-fade-enter-active, .banner-fade-leave-active {
  transition: all 0.4s ease-in-out;
  max-height: 120px;
  overflow: hidden;
}
.banner-fade-enter-from, .banner-fade-leave-to {
  opacity: 0;
  transform: translateY(-10px);
  max-height: 0;
  padding-top: 0;
  padding-bottom: 0;
  margin-top: 0;
  margin-bottom: 0;
}
</style>

```


### File: src/views/LearningHubView.vue

```
<template>
  <main id="learning-hub-view" class="fade-in">
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">Learning Hub</h2>
      <p class="text-gray-500 dark:text-gray-400 mt-1">Review your common mistakes and track your progress over time.</p>
    </div>

    <!-- Loading and Error States -->
    <div v-if="progressStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading your learning topics...</p>
    </div>
    <div v-else-if="progressStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ progressStore.error }}</p>
    </div>

    <!-- Topics List -->
    <div v-else-if="progressStore.topics.length > 0" class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200">Your Focus Areas</h3>
      <TopicCard
        v-for="topic in progressStore.topics"
        :key="topic.topic_id"
        :topic="topic"
      />
    </div>
    <div v-else class="text-center py-10 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
      <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200">No Learning Topics Yet!</h4>
      <p class="text-gray-500 dark:text-gray-400">Get AI feedback on your journal entries to start building your Learning Hub.</p>
    </div>
  </main>
</template>

<script setup>
import { onMounted } from 'vue';
import { useProgressStore } from '../stores/progressStore';
import TopicCard from '../components/TopicCard.vue';

const progressStore = useProgressStore();

onMounted(() => {
  progressStore.fetchTopics();
});
</script>

```


### File: src/views/LoginView.vue

```
<template>
  <div class="flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900">
    <main class="w-full max-w-md p-8 space-y-6 bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-200 dark:border-gray-700">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-indigo-600 dark:text-indigo-400">LingoJourn</h1>
        <p class="text-gray-500 dark:text-gray-400">Log in to continue your journey</p>
      </div>
      <form @submit.prevent="handleLogin" class="space-y-4">
        <div>
          <label for="username" class="text-sm font-medium text-gray-700 dark:text-gray-300">Username or Email</label>
          <input
            v-model="username"
            type="text"
            id="username"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="yourname"
          />
        </div>
        <div>
          <label for="password" class="text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
          <input
            v-model="password"
            type="password"
            id="password"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="••••••••"
          />
        </div>
        <div v-if="authStore.error" class="text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/50 p-3 rounded-lg">
          {{ authStore.error }}
        </div>
        <button
          type="submit"
          :disabled="authStore.isLoading"
          class="w-full py-2 px-4 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-indigo-400 dark:disabled:bg-indigo-800 transition-colors"
        >
          {{ authStore.isLoading ? 'Logging in...' : 'Log In' }}
        </button>
      </form>
      <div class="text-center text-sm text-gray-600 dark:text-gray-400">
        <p>
          Don't have an account? 
          <router-link to="/signup" class="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
            Sign Up
          </router-link>
        </p>
        <!-- Button to open the user manual -->
        <p class="mt-4">
            Need help? 
            <button @click="showManualModal = true" class="font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
                View User Manual
            </button>
        </p>
      </div>
    </main>

    <!-- Modal for the user manual -->
    <ManualModal 
        :show="showManualModal" 
        title="LingoJourn User Manual"
        :content="participantManualContent"
        @close="showManualModal = false" 
    />
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useAuthStore } from '../stores/authStore';
import ManualModal from '../components/ManualModal.vue'; // Import the new modal component

const authStore = useAuthStore();
const username = ref('');
const password = ref('');

const showManualModal = ref(false); // State to control the modal's visibility

const handleLogin = () => {
  authStore.login({ username: username.value, password: password.value });
};

// The content for the participant manual is stored here as an HTML string.
// I've added images with loading="lazy" to illustrate key features.
const participantManualContent = `
<h1>LingoJourn User Manual</h1>
<p>Welcome to LingoJourn, your personal AI-powered partner for improving your English through journaling! This guide will walk you through all the features of the app.</p>
<hr />
<h2>1. Getting Started</h2>
<h3>Creating Your Account</h3>
<p>To use LingoJourn, you must first create an account.</p>
<ol>
    <li>Click on the <strong>Sign Up</strong> link on the login page.</li>
        <img src="https://ipa.parasyst.com/static/images/login.png" alt="login" loading="lazy">
        <br/>
    <li>Fill in your details: Real Name, Student ID, Username, Email, and a secure Password.</li>
        <img src="https://ipa.parasyst.com/static/images/signup.png" alt="sign up" loading="lazy">
        <br/>
    <li><strong>Important</strong>: Your Student ID and Email must be pre-approved by your teacher/administrator to register successfully.</li>
        <img src="https://ipa.parasyst.com/static/images/signup_login.png" alt="login" loading="lazy">
        <br/>
    <li>Once you sign up, you'll be redirected to the login page.</li>
</ol>
<h3>Logging In</h3>
<p>Enter the Username and Password you created during signup to access your dashboard.</p>
<hr />
<h2>2. Your Dashboard</h2>
<p>The dashboard is your central hub. Here you can see your writing streak, a snapshot of your learning progress, access past journals, or start a new entry.</p>
  <img src="https://ipa.parasyst.com/static/images/dashboard.png" alt="Dashboard Overview" loading="lazy">
  <br/>
<hr />
<h2>3. The Four-Phase Writing Process</h2>
<p>Every journal entry follows a structured four-phase process designed to maximize your learning. It guides you from planning to a final, polished piece.</p>
  <img src="https://placehold.co/600x120/e2e8f0/4a5568?text=1.+Scaffolding+→+2.+Writing+→+3.+Evaluation+→+4.+Completed" alt="Writing Phases" loading="lazy">
  <br/>
<h3>Phase 1: Scaffolding (Outline)</h3>
<p>This is the planning stage. The goal is to create a simple outline for your journal entry. You can write freely or chat with your AI partner, Lingo, for ideas.</p>
  <img src="https://ipa.parasyst.com/static/images/scaffolding.png" alt="scaffolding" loading="lazy">
  <br/>
<h3>Phase 2: Writing (Draft)</h3>
<p>Now it's time to write your full journal entry using your outline as a guide. Your AI Writing Partner is available to help if you get stuck.</p>
  <img src="https://ipa.parasyst.com/static/images/writing.png" alt="Writing" loading="lazy">
  <br/>
<h3>Phase 3: Evaluation (Feedback)</h3>
<p>In this phase, Lingo analyzes your complete draft and provides detailed feedback on grammar, vocabulary, and phrasing. You can apply the suggestions with a single click.</p>
  <img src="https://ipa.parasyst.com/static/images/Evaluation.png" alt="Evaluation" loading="lazy">
  <br/>
<h3>Phase 4: Completed</h3>
<p>Congratulations! You've finished your journal entry. Your final text is saved, and all the learning points have been added to your <strong>Learning Hub</strong> for future review.</p>
  <img src="https://ipa.parasyst.com/static/images/finished.png" alt="finished" loading="lazy">
  <br/>
<hr />
`;
</script>


```


### File: src/views/admin/AdminJournalDetailView.vue

```
<template>
  <main id="admin-journal-detail-view" class="fade-in">
    <!-- Header -->
    <div class="mb-6">
      <router-link :to="`/admin/student/${studentId}`" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100 font-medium flex items-center gap-2 mb-4">
         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path></svg>
        Back to Student Details
      </router-link>
    </div>
    
    <!-- Loading and Error States -->
    <div v-if="adminStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading journal...</p>
    </div>
    <div v-else-if="adminStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ adminStore.error }}</p>
    </div>

    <div v-else-if="journal" class="space-y-6">
       <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <div class="flex justify-between items-center">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ journal.title || 'Journal Entry' }}</h2>
          <div class="text-sm text-gray-500 dark:text-gray-400">{{ formatDate(journal.journal_date) }}</div>
        </div>
        <div v-if="journal.writing_phase === 'completed'" class="mt-2 inline-block bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300 text-xs font-bold px-2 py-1 rounded-full">
          Completed
        </div>
      </div>
      
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <h3 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">Outline</h3>
        <p class="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap">{{ journal.outline_content || 'No outline was created.' }}</p>
      </div>

      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <h3 class="font-semibold text-gray-700 dark:text-gray-300 mb-2">Content</h3>
        <p class="text-base text-gray-800 dark:text-gray-200 whitespace-pre-wrap leading-relaxed">{{ journal.content }}</p>
      </div>

    </div>
  </main>
</template>

<script setup>
import { onMounted, computed } from 'vue';
import { useRoute } from 'vue-router';
import { useAdminStore } from '../../stores/adminStore';
import { format, parseISO } from 'date-fns';

const route = useRoute();
const adminStore = useAdminStore();
const studentId = route.params.studentId;
const journalDate = route.params.journalDate;

const journal = computed(() => adminStore.currentStudentJournal);

onMounted(() => {
  if (studentId && journalDate) {
    adminStore.fetchSingleStudentJournal(studentId, journalDate);
  }
});

const formatDate = (dateString) => {
  if (!dateString) return '';
  const date = parseISO(dateString);
  return format(date, 'MMMM d, yyyy');
};
</script>

```


### File: src/views/admin/AdminStudentDetailView.vue

```
<template>
  <main id="admin-student-detail-view" class="fade-in">
    <!-- Header -->
    <div class="mb-6">
      <router-link to="/admin" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100 font-medium flex items-center gap-2 mb-4">
         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path></svg>
        Back to Admin Dashboard
      </router-link>
    </div>
    
    <div v-if="adminStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading student details...</p>
    </div>
    <div v-else-if="adminStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ adminStore.error }}</p>
    </div>

    <div v-else-if="adminStore.studentDetails" class="space-y-6">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{ adminStore.studentDetails.realname }}</h2>
        <p class="text-gray-500 dark:text-gray-400 mt-1">
            Username: {{ adminStore.studentDetails.username }} | Student ID: {{ adminStore.studentDetails.student_id }} | Group: {{adminStore.studentDetails.group}}
        </p>
        <p class="text-gray-500 dark:text-gray-400">{{ adminStore.studentDetails.email }}</p>
        </div>

      <!-- Stat Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <AdminStatCard title="Total Journals" :value="adminStore.studentDetails.journal_count" />
        <AdminStatCard title="Total Errors" :value="adminStore.studentDetails.total_errors" />
        <AdminStatCard title="Last Active" :value="formatDate(adminStore.studentDetails.last_active)" />
      </div>

      <!-- Charts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <ErrorDistributionChart title="Student Error Distribution" :chart-raw-data="adminStore.studentDetails.error_distribution" />
        <ErrorTrendChart title="Student Error Trend" :chart-raw-data="adminStore.studentDetails.error_trend" />
      </div>

      <!-- Student Journal List Section -->
      <div class="mt-6">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">Journal Entries</h3>
        
        <!-- Loading state for journals -->
        <div v-if="adminStore.isLoadingJournals" class="text-center py-10">
          <p class="text-gray-500 dark:text-gray-400">Loading journals...</p>
        </div>

        <!-- Journals List -->
        <div v-else-if="adminStore.studentJournals.length > 0" class="space-y-4">
          <AdminJournalCard
            v-for="journal in adminStore.studentJournals"
            :key="journal.id"
            :journal="journal"
          />
        </div>

        <!-- Empty state for journals -->
        <div v-else class="text-center py-10 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
          <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200">No Journal Entries</h4>
          <p class="text-gray-500 dark:text-gray-400">This student has not written any journals yet.</p>
        </div>
      </div>
    </div>
  </main>
</template>

<script setup>
import { onMounted, watch } from 'vue';
import { useRoute } from 'vue-router';
import { useAdminStore } from '../../stores/adminStore';
import { formatDistanceToNow } from 'date-fns';
import AdminStatCard from '../../components/admin/AdminStatCard.vue';
import ErrorDistributionChart from '../../components/admin/ErrorDistributionChart.vue';
import ErrorTrendChart from '../../components/admin/ErrorTrendChart.vue';
import AdminJournalCard from '../../components/admin/AdminJournalCard.vue';

const route = useRoute();
const adminStore = useAdminStore();
const studentId = route.params.id;

const loadDetails = () => {
  if (studentId) {
    adminStore.fetchStudentDetails(studentId);
    adminStore.fetchStudentJournals(studentId);
  }
};

onMounted(loadDetails);

watch(() => route.params.id, (newId) => {
  if (newId) {
    loadDetails();
  }
});

const formatDate = (dateString) => {
  if (!dateString) return 'Never';
  return formatDistanceToNow(new Date(dateString), { addSuffix: true });
};
</script>

```


### File: src/views/admin/AdminDashboardView.vue

```
<template>
  <main id="admin-dashboard-view" class="p-4 md:p-6 fade-in">
    <!-- Header -->
    <div class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Admin Dashboard</h2>
          <p class="text-gray-500 dark:text-gray-400">Overview of class progress and statistics.</p>
        </div>
        <div class="flex items-center gap-3">
          <!-- Button to open the admin manual -->
          <button @click="showManualModal = true" class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 font-semibold px-4 py-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M128,24a8,8,0,0,0-8,8V64a8,8,0,0,0,16,0V32A8,8,0,0,0,128,24Zm0,176a8,8,0,0,0-8,8v32a8,8,0,0,0,16,0V208A8,8,0,0,0,128,200Zm88-88H192a8,8,0,0,0,0,16h24a8,8,0,0,0,0-16ZM40,120H64a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16Zm151.78-63.78a8,8,0,0,0-11.32,0L158.11,78.59a8,8,0,0,0,11.31,11.31l22.35-22.34a8,8,0,0,0,0-11.32ZM78.59,158.11,56.24,180.46a8,8,0,0,0,11.32,11.32l22.34-22.35a8,8,0,0,0-11.31-11.31Zm11.31-68.2L67.54,67.54a8,8,0,0,0-11.32,11.32l22.35,22.34a8,8,0,0,0,11.31-11.31ZM128,72a56,56,0,1,0,56,56A56.06,56.06,0,0,0,128,72Zm0,96a40,40,0,1,1,40-40A40,40,0,0,1,128,168Z"></path></svg>
            Admin Manual
          </button>
          <router-link
            to="/admin/manage-students"
            class="bg-indigo-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z"></path></svg>
            Manage Whitelist
          </router-link>
        </div>
      </div>
    </div>

    <!-- Loading and Error States -->
    <div v-if="adminStore.isLoading" class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">Loading analytics...</p>
    </div>
    <div v-else-if="adminStore.error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-4 rounded-lg">
      <p>{{ adminStore.error }}</p>
    </div>

    <div v-else-if="adminStore.classAnalytics">
      <!-- Stat Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <AdminStatCard title="Total Students" :value="adminStore.classAnalytics.total_students" />
        <AdminStatCard title="Total Journal Entries" :value="adminStore.classAnalytics.total_journals" />
        <AdminStatCard title="Total Errors Logged" :value="adminStore.classAnalytics.total_errors" />
        <AdminStatCard title="Avg Errors per Journal" :value="adminStore.classAnalytics.avg_errors_per_journal.toFixed(2)" />
      </div>

      <!-- Charts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Error Distribution Chart -->
          <div class="relative h-80 mb-16">
            <ErrorDistributionChart title="Class Error Distribution" :chart-raw-data="adminStore.classAnalytics.error_distribution" />
          </div>

        <!-- Error Trend Chart -->
          <div class="relative h-80 mb-16">
            <ErrorTrendChart title="Class Error Trend" :chart-raw-data="adminStore.classAnalytics.error_trend" />
          </div>
      </div>
      <!-- Student Table -->
      <div>
        <StudentTable :students="adminStore.students" />
      </div>
    </div>
     <!-- Modal for the admin manual -->
    <ManualModal 
        :show="showManualModal" 
        title="LingoJourn Administrator Manual"
        :content="adminManualContent"
        @close="showManualModal = false" 
    />
  </main>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { useAdminStore } from '../../stores/adminStore';
import AdminStatCard from '../../components/admin/AdminStatCard.vue';
import ErrorDistributionChart from '../../components/admin/ErrorDistributionChart.vue';
import ErrorTrendChart from '../../components/admin/ErrorTrendChart.vue';
import StudentTable from '../../components/admin/StudentTable.vue';
import ManualModal from '../../components/ManualModal.vue'; // Import the new modal component

const adminStore = useAdminStore();
const showManualModal = ref(false); // State to control the modal's visibility

onMounted(() => {
  adminStore.fetchClassAnalytics();
  adminStore.fetchAllStudents();
});

// The content for the admin manual is stored here as an HTML string.
// I've added an image with loading="lazy" to illustrate a key feature.
const adminManualContent = `
<h1>LingoJourn Administrator Manual</h1>
<p>Welcome, Administrator! This guide provides an overview of the tools available to you for managing students and monitoring class-wide progress.</p>
<hr>
<h2>1. The Admin Dashboard</h2>
<p>This is your main view, providing a high-level summary of your class's activity.</p>
<h3>Key Analytics & Charts</h3>
<p>The dashboard gives you a live look at class-wide statistics and charts showing common error types and performance trends over time. This helps you quickly identify topics the whole class may be struggling with.</p>
  <img src="https://ipa.parasyst.com/static/images/admin_dashboard.png" alt="login" loading="lazy">
  <br/>
<h3>Student List</h3>
<p>The table at the bottom of the dashboard lists all registered students with a summary of their activity. You can click "View" on any student to see their detailed profile.</p>
  <img src="https://ipa.parasyst.com/static/images/students_admin.png" alt="login" loading="lazy">
  <br/>
<hr>
<h2>2. Managing Student Access</h2>
<p>You control who can register for LingoJourn via the student whitelist. From the Admin Dashboard, click the <strong>Manage Whitelist</strong> button.</p>
<h3>Adding a Student</h3>
<ol>
    <li>On the "Manage Student Whitelist" page, enter the student's <strong>Student ID</strong> and <strong>Email Address</strong> into the form.</li>
    <li>Click the "Add Student" button. The student will now be able to create an account.</li>
</ol>
<h3>Removing a Student</h3>
<p>In the whitelist table, find the student you wish to remove and click the "Remove" button. This prevents them from registering (it does not delete an existing account).</p>
<hr>
<h2>3. Monitoring & Reviewing Student Work</h2>
<p>To see how a specific student is doing, click "View" from the main student list on the dashboard. This will take you to their individual detail page, where you can see their personal analytics and a list of all their journal entries.</p>
  <img src="https://ipa.parasyst.com/static/images/students_admin.png" alt="login" loading="lazy">
  <br/>
  <img src="https://ipa.parasyst.com/static/images/admin_journal_entry.png" alt="login" loading="lazy">
  <br/>
<p>Clicking on any journal entry allows you to read the student's final, corrected text, giving you direct insight into their writing process and progress.</p>
  <img src="https://ipa.parasyst.com/static/images/journal_entry.png" alt="login" loading="lazy">
  <br/>
`;
</script>


```


### File: src/views/admin/AdminManageStudentsView.vue

```
<template>
  <main id="admin-manage-students-view" class="fade-in">
    <!-- Header -->
    <div class="mb-6">
      <router-link to="/admin" class="text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-100 font-medium flex items-center gap-2 mb-4">
         <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z"></path></svg>
        Back to Admin Dashboard
      </router-link>
       <div class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
          <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">Manage Student Whitelist</h2>
          <p class="text-gray-500 dark:text-gray-400">Add or remove students who are allowed to register for an account.</p>
        </div>
    </div>

    <!-- Add Student Form -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
      <h3 class="font-semibold text-lg text-gray-800 dark:text-gray-200 mb-4">Add New Student</h3>
      <form @submit.prevent="handleAddStudent" class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
        <div>
          <label for="student_id" class="text-sm font-medium text-gray-700 dark:text-gray-300">Student ID</label>
          <input
            v-model="newStudent.student_id"
            type="text"
            id="student_id"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="e.g., 411223344"
          />
        </div>
        <div>
          <label for="email" class="text-sm font-medium text-gray-700 dark:text-gray-300">Email Address</label>
          <input
            v-model="newStudent.email"
            type="email"
            id="email"
            required
            class="w-full px-3 py-2 mt-1 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="student@example.com"
          />
        </div>
        <button
          type="submit"
          :disabled="isSubmitting"
          class="w-full md:w-auto py-2 px-4 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-indigo-400 dark:disabled:bg-indigo-800 transition-colors"
        >
          {{ isSubmitting ? 'Adding...' : 'Add Student' }}
        </button>
      </form>
       <div v-if="adminStore.error" class="mt-4 text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/50 p-3 rounded-lg">
          {{ adminStore.error }}
        </div>
        <div v-if="successMessage" class="mt-4 text-sm text-green-700 dark:text-green-300 bg-green-50 dark:bg-green-900/50 p-3 rounded-lg">
          {{ successMessage }}
        </div>
    </div>

    <!-- Whitelist Table -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
      <div class="p-4">
        <h4 class="font-semibold text-gray-800 dark:text-gray-200">Whitelisted Students ({{ adminStore.whitelist.length }})</h4>
      </div>
      <div v-if="adminStore.isLoadingWhitelist" class="text-center p-8 text-gray-500 dark:text-gray-400">
        Loading whitelist...
      </div>
      <table v-else class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-700/50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Student ID</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Email</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Date Added</th>
            <th scope="col" class="relative px-6 py-3"><span class="sr-only">Actions</span></th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          <tr v-if="adminStore.whitelist.length === 0">
            <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              No students have been added to the whitelist yet.
            </td>
          </tr>
          <tr v-for="student in adminStore.whitelist" :key="student.id" class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
            <td class="px-6 py-4 whitespace-nowrap font-mono text-sm text-gray-800 dark:text-gray-200">{{ student.student_id }}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{{ student.email }}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{{ formatDate(student.created_at) }}</td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button @click="handleRemoveStudent(student.student_id)" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                Remove
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </main>
</template>

<script setup>
import { ref, onMounted, reactive } from 'vue';
import { useAdminStore } from '../../stores/adminStore';
import { format } from 'date-fns';

const adminStore = useAdminStore();

const newStudent = reactive({
  student_id: '',
  email: '',
});

const isSubmitting = ref(false);
const successMessage = ref('');

onMounted(() => {
  adminStore.fetchWhitelist();
});

const handleAddStudent = async () => {
  isSubmitting.value = true;
  successMessage.value = '';
  const result = await adminStore.addStudentToWhitelist({ ...newStudent });
  if (result.success) {
    successMessage.value = 'Student added to whitelist successfully!';
    newStudent.student_id = '';
    newStudent.email = '';
  }
  isSubmitting.value = false;
};

const handleRemoveStudent = async (studentId) => {
    // In a production app, it's better to use a modal component for confirmation.
    // For this implementation, we proceed directly to keep it simple.
    await adminStore.removeStudentFromWhitelist(studentId);
};


const formatDate = (dateString) => {
  if (!dateString) return '';
  return format(new Date(dateString), 'MMM d, yyyy');
};
</script>

```


### File: src/stores/counter.js

```
import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useCounterStore = defineStore('counter', () => {
  const count = ref(0)
  const doubleCount = computed(() => count.value * 2)
  function increment() {
    count.value++
  }

  return { count, doubleCount, increment }
})

```


### File: src/stores/adminStore.js

```
import { defineStore } from 'pinia';
import apiClient from '../services/api';

export const useAdminStore = defineStore('admin', {
  state: () => ({
    students: [],
    studentDetails: null,
    studentJournals: [],
    currentStudentJournal: null,
    classAnalytics: null, // This will hold all dashboard data
    isLoading: false,
    isLoadingJournals: false,
    error: null,
    whitelist: [], // New state for student whitelist
    isLoadingWhitelist: false, // New loading state
  }),
  actions: {
    async fetchAllStudents() {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.get('/admin/students');
        this.students = response.data;
      } catch (err) {
        this.error = 'Failed to load students.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchStudentDetails(studentId) {
      this.isLoading = true;
      this.error = null;
      this.studentDetails = null;
      try {
        const response = await apiClient.get(`/admin/students/${studentId}`);
        this.studentDetails = response.data;
      } catch (err) {
        this.error = `Failed to load details for student ${studentId}.`;
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchClassAnalytics() {
        this.isLoading = true;
        this.error = null;
        this.classAnalytics = null;
        try {
            // Fetch all data points for the dashboard
            const distributionRes = await apiClient.get('/admin/analytics/error-distribution');
            const trendRes = await apiClient.get('/admin/analytics/error-trend');
            
            // For stats, we can aggregate from the full student list
            const studentsRes = await apiClient.get('/admin/students');
            const studentsData = studentsRes.data;

            const total_students = studentsData.length;
            const total_journals = studentsData.reduce((sum, student) => sum + student.journal_count, 0);
            const total_errors = studentsData.reduce((sum, student) => sum + student.total_errors, 0);
            const avg_errors_per_journal = total_journals > 0 ? total_errors / total_journals : 0;
            
            // Combine all data into the classAnalytics object
            this.classAnalytics = {
              total_students,
              total_journals,
              total_errors,
              avg_errors_per_journal,
              error_distribution: distributionRes.data,
              error_trend: trendRes.data,
            };

        } catch (err) {
            this.error = 'Failed to load class analytics.';
            console.error(err);
        } finally {
            this.isLoading = false;
        }
    },

    async fetchStudentJournals(studentId) {
      this.isLoadingJournals = true;
      this.error = null;
      this.studentJournals = []; 
      try {
        const response = await apiClient.get(`/admin/students/${studentId}/journals`);
        this.studentJournals = response.data;
      } catch (err) {
        this.error = `Failed to load journals for student ${studentId}.`;
        console.error(err);
      } finally {
        this.isLoadingJournals = false;
      }
    },
    
    async fetchSingleStudentJournal(studentId, journalDate) {
      this.isLoading = true;
      this.error = null;
      this.currentStudentJournal = null;
      try {
        const response = await apiClient.get(`/admin/students/${studentId}/journals/${journalDate}`);
        this.currentStudentJournal = response.data;
      } catch (err) {
        this.error = `Failed to load journal for date ${journalDate}.`;
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    // --- NEW ACTIONS for Whitelist Management ---
    async fetchWhitelist() {
      this.isLoadingWhitelist = true;
      this.error = null;
      try {
        const response = await apiClient.get('/admin/whitelist');
        this.whitelist = response.data;
      } catch (err) {
        this.error = 'Failed to load student whitelist.';
        console.error(err);
      } finally {
        this.isLoadingWhitelist = false;
      }
    },

    async addStudentToWhitelist(studentData) {
      // Clear previous errors before a new attempt
      this.error = null;
      try {
        const response = await apiClient.post('/admin/whitelist', studentData);
        this.whitelist.push(response.data);
        // Sort the list after adding
        this.whitelist.sort((a, b) => a.student_id.localeCompare(b.student_id));
        return { success: true };
      } catch (err) {
        this.error = err.response?.data?.detail || 'Failed to add student.';
        console.error(err);
        return { success: false, error: this.error };
      }
    },

    async removeStudentFromWhitelist(studentId) {
      this.error = null;
      try {
        await apiClient.delete(`/admin/whitelist/${studentId}`);
        this.whitelist = this.whitelist.filter(s => s.student_id !== studentId);
        return { success: true };
      } catch (err) {
        this.error = err.response?.data?.detail || 'Failed to remove student.';
        console.error(err);
        return { success: false, error: this.error };
      }
    },
  },
});

```


### File: src/stores/journalStore.js

```
import { defineStore } from 'pinia';
import apiClient from '../services/api';
import { format, parseISO } from 'date-fns';
import { useRouter } from 'vue-router';

export const useJournalStore = defineStore('journal', {
  state: () => ({
    journals: [],
    isLoading: false,
    error: null,
    isUploading: false, // New state for image uploads
  }),
  getters: {
    getJournalByDate: (state) => (date) => {
      return state.journals.find(j => j.journal_date === date);
    }
  },
  actions: {
    // --- Existing actions ---
    async fetchJournals() {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.get('/journals/');
        // The API returns journal_date as a string like "2025-09-10"
        // We'll format it for display later, but store as is.
        this.journals = response.data;
      } catch (err) {
        this.error = 'Failed to load journal entries.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },
    async fetchJournalByDate(date, forceRefresh = false) {
        // Check if we already have it and are not forcing a refresh
        const existing = this.getJournalByDate(date);
        if (existing && !forceRefresh) {
            return existing;
        }

        // If not, fetch it from the API
        this.isLoading = true;
        this.error = null;
       try {
            const response = await apiClient.get(`/journals/${date}`);
            
            // If it already exists, update it. Otherwise, add it.
            const index = this.journals.findIndex(j => j.journal_date === date);
            if (index !== -1) {
                // FIXED: Use splice to ensure reactivity
                this.journals.splice(index, 1, response.data);
            } else {
                this.journals.push(response.data);
            }
            return response.data;
        } catch (err) {
            this.error = 'Failed to load journal entry.';
            console.error(err);
            return null; // Return null on failure
        } finally {
            this.isLoading = false;
        }
    },

    async createJournal(content) {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.post('/journals/', { content });
        // Add the new journal to the front of our local list
        this.journals.unshift(response.data);
        return response.data; // Return the created journal
      } catch (err) {
        this.error = 'Failed to create journal entry.';
        console.error(err);
        return null;
      } finally {
        this.isLoading = false;
      }
    },

    async updateJournal(date, payload) {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.put(`/journals/${date}`, payload);
        // Find and update the journal in our local list
        this.updateLocalJournal(response.data);
        return response.data;
      } catch (err) {
        this.error = 'Failed to update journal entry.';
        console.error(err);
        return null;
      } finally {
        this.isLoading = false;
      }
    },
    
    async updateJournalPhase(date, phase) {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.put(`/journals/${date}/phase`, { phase });
        this.updateLocalJournal(response.data);
        return response.data;
      } catch (err) {
        this.error = 'Failed to update journal phase.';
        console.error(err);
        return null;
      } finally {
        this.isLoading = false;
      }
    },

    // --- NEW ACTION for image uploading ---
    async uploadImage(date, file) {
      this.isUploading = true;
      this.error = null;
      try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await apiClient.post(`/journals/${date}/images`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        
        // The response contains the updated journal, so we update our local state
        this.updateLocalJournal(response.data);
      } catch (err) {
        this.error = err.response?.data?.detail || 'Failed to upload image.';
        console.error(err);
      } finally {
        this.isUploading = false;
      }
    },

    addChatMessageOptimistically(date, message) {
      const journal = this.getJournalByDate(date);
      if (journal) {
        if (!journal.chat_messages) {
          journal.chat_messages = [];
        }
        journal.chat_messages.push(message);
      }
    },

    updateLocalJournal(updatedJournal) {
      if (!updatedJournal || !updatedJournal.journal_date) return;
      
      const index = this.journals.findIndex(j => j.journal_date === updatedJournal.journal_date);
      if (index !== -1) {
        this.journals.splice(index, 1, updatedJournal);
      } else {
        this.journals.unshift(updatedJournal);
      }
    },

    setJournalContent(date, newContent) {
      const index = this.journals.findIndex(j => j.journal_date === date);
      if (index !== -1) {
        this.journals[index].content = newContent;
      }
    },

    formatDisplayDate(dateString) {
      if (!dateString) return '';
      const date = parseISO(dateString);
      return format(date, 'MMMM d, yyyy');
    }
  },
});

```


### File: src/stores/authStore.js

```
import { defineStore } from 'pinia';
import apiClient from '../services/api';
import router from '../router';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    token: localStorage.getItem('token') || null,
    error: null,
    isLoading: false,
  }),
  getters: {
    isAuthenticated: (state) => !!state.token && !!state.user,
    isAdmin: (state) => !!state.user && state.user.is_admin,
  },
  actions: {
    async signup(credentials) {
      this.isLoading = true;
      this.error = null;
      try {
        await apiClient.post('/auth/signup', credentials);
        // We don't log the user in automatically.
        // They will be redirected to log in after successful signup.
      } catch (err) {
        if (err.response && err.response.data && err.response.data.detail) {
             this.error = `Signup failed: ${err.response.data.detail}`;
        } else {
            this.error = 'An unknown error occurred during signup.';
        }
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },
    async login(credentials) {
      this.isLoading = true;
      this.error = null;
      try {
        // API expects form data for the token endpoint
        const formData = new URLSearchParams();
        formData.append('username', credentials.username);
        formData.append('password', credentials.password);

        const response = await apiClient.post('/auth/token', formData, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        });

        const token = response.data.access_token;
        this.token = token;
        localStorage.setItem('token', token);

        // After getting token, fetch user profile
        await this.fetchUser();
        
        // Redirect to dashboard
        router.push('/');
      } catch (err) {
        this.error = 'Login failed. Please check your credentials.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchUser() {
        if (!this.token) return;
        try {
            const response = await apiClient.get('/auth/me');
            this.user = response.data;
        } catch (err) {
            console.error('Failed to fetch user:', err);
            // If fetching user fails (e.g., expired token), log them out
            this.logout();
        }
    },

    logout() {
      this.user = null;
      this.token = null;
      localStorage.removeItem('token');
      router.push('/login');
    },
  },
});

```


### File: src/stores/progressStore.js

```
import { defineStore } from 'pinia';
import apiClient from '../services/api';

export const useProgressStore = defineStore('progress', {
  state: () => ({
    summary: null,
    topics: [],
    currentTopicDetails: null,
    isLoading: false,
    error: null,
    streak: 0,
  }),
  actions: {
    async fetchProgressSummary() {
      this.isLoading = true;
      this.error = null;
      this.summary = null;
      try {
        const response = await apiClient.get('/progress/summary');
        this.summary = response.data;
      } catch (err) {
        this.error = 'Failed to load progress summary.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchTopics() {
      this.isLoading = true;
      this.error = null;
      this.topics = [];
      try {
        const response = await apiClient.get('/progress/topics');
        this.topics = response.data;
      } catch (err) {
        this.error = 'Failed to load learning topics.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchTopicDetails(topicId) {
      this.isLoading = true;
      this.error = null;
      this.currentTopicDetails = null;
      try {
        const response = await apiClient.get(`/progress/topics/${topicId}`);
        this.currentTopicDetails = response.data;
      } catch (err) {
        this.error = `Failed to load details for topic ${topicId}.`;
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async fetchStreak() {
        this.isLoading = true;
        this.error = null;
        try {
            const response = await apiClient.get('/progress/streak');
            this.streak = response.data.streak_count;
        } catch (err) {
            this.error = 'Failed to load writing streak.';
            console.error(err);
        } finally {
            this.isLoading = false;
        }
    },
  },
});


```


### File: src/stores/uiStore.js

```
import { defineStore } from 'pinia';

export const useUiStore = defineStore('ui', {
  state: () => ({
    isDarkMode: false,
  }),
  actions: {
    initTheme() {
      const storedTheme = localStorage.getItem('theme');
      if (storedTheme) {
        this.isDarkMode = storedTheme === 'dark';
      } else {
        this.isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      }
      this.applyTheme();
    },
    toggleDarkMode() {
      this.isDarkMode = !this.isDarkMode;
      this.applyTheme();
    },
    applyTheme() {
        if (this.isDarkMode) {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        }
    }
  },
});

```


### File: src/stores/aiStore.js

```
import { defineStore } from 'pinia';
import apiClient from '../services/api';
import { useJournalStore } from './journalStore';

export const useAiStore = defineStore('ai', {
  state: () => ({
    feedback: [],
    isLoading: false,
    error: null,
    conceptualFeedback: null,
    isConceptualLoading: false,
  }),
  actions: {
    async getFeedback(date, text) {
      this.isLoading = true;
      this.error = null;
      this.feedback = []; // Clear previous feedback
      this.conceptualFeedback = null;
      try {
        const response = await apiClient.post(`/ai/feedback/${date}`, { text });
        // The new response has a different structure
        this.feedback = response.data.feedback_items || [];
        this.conceptualFeedback = response.data.high_level_summary || null;
      } catch (err) {
        this.error = 'An error occurred while getting AI feedback. Please try again.';
        console.error(err);
      } finally {
        this.isLoading = false;
      }
    },

    async getConceptualFeedback(date, text) {
      this.isConceptualLoading = true;
      this.error = null;
      this.conceptualFeedback = null; // Clear previous feedback
      try {
        const response = await apiClient.post(`/ai/conceptual-feedback/${date}`, { text });
        this.conceptualFeedback = response.data.feedback_text;
      } catch (err) {
        this.error = 'An error occurred while getting high-level feedback.';
        console.error(err);
      } finally {
        this.isConceptualLoading = false;
      }
    },

    async chatWithAI(date, message, enableCorrection) {
      this.isLoading = true;
      this.error = null;
      const journalStore = useJournalStore();
      
      // Optimistically add the user's message for perceived speed
      const userMessage = {
        id: `temp-${Date.now()}`,
        sender: 'user',
        message_type: 'conversation',
        message_text: message,
      };
      journalStore.addChatMessageOptimistically(date, userMessage);
      
      try {
        // The API now returns the complete, updated journal object
        const payload = { message, enable_correction: enableCorrection };
        const response = await apiClient.post(`/ai/chat/${date}`, payload);
        
        // **KEY CHANGE**: Update the entire journal state with the response from the API.
        // This is more robust than fetching again.
        journalStore.updateLocalJournal(response.data);

      } catch (err) {
        this.error = 'An error occurred during the chat. Please try again.';
        console.error(err);
        // NOTE: In a production app, you might want to remove the optimistic message on failure.
      } finally {
        this.isLoading = false;
      }
    },
  },
});


```


### File: src/router/index.js

```
import { createRouter, createWebHistory } from 'vue-router';
import { useAuthStore } from '../stores/authStore';
import DashboardView from '../views/DashboardView.vue';
import WriterView from '../views/WriterView.vue';
import LoginView from '../views/LoginView.vue';
import SignupView from '../views/SignupView.vue';
import LearningHubView from '../views/LearningHubView.vue';
import TopicDetailView from '../views/TopicDetailView.vue';
import AdminDashboardView from '../views/admin/AdminDashboardView.vue';
import AdminStudentDetailView from '../views/admin/AdminStudentDetailView.vue';
import AdminJournalDetailView from '../views/admin/AdminJournalDetailView.vue';
import AdminManageStudentsView from '../views/admin/AdminManageStudentsView.vue'; // New Import

const routes = [
  {
    path: '/',
    name: 'Dashboard',
    component: DashboardView,
    meta: { requiresAuth: true },
  },
  {
    path: '/writer/:date?', // The date parameter is optional
    name: 'Writer',
    component: WriterView,
    props: true, // Pass route params as props to the component
    meta: { requiresAuth: true },
  },
  {
    path: '/login',
    name: 'Login',
    component: LoginView,
  },
  { 
    path: '/signup', 
    name: 'Signup', 
    component: SignupView 
  },
  { 
    path: '/learning-hub', 
    name: 'LearningHub', 
    component: LearningHubView, 
    meta: { requiresAuth: true } 
  },
  { 
    path: '/learning-hub/topic/:topic_id', 
    name: 'TopicDetail', 
    component: TopicDetailView, 
    meta: { requiresAuth: true }, 
    props: true 
  },
  {
    path: '/admin',
    name: 'AdminDashboard',
    component: AdminDashboardView,
    meta: { requiresAuth: true, requiresAdmin: true },
  },
  {
    path: '/admin/student/:id',
    name: 'AdminStudentDetail',
    component: AdminStudentDetailView,
    meta: { requiresAuth: true, requiresAdmin: true },
    props: true,
  },
  {
    path: '/admin/student/:studentId/journal/:journalDate',
    name: 'AdminJournalDetail',
    component: AdminJournalDetailView,
    meta: { requiresAuth: true, requiresAdmin: true },
    props: true,
  },
  // --- NEW ROUTE ---
  {
    path: '/admin/manage-students',
    name: 'AdminManageStudents',
    component: AdminManageStudentsView,
    meta: { requiresAuth: true, requiresAdmin: true },
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

// Navigation Guard
router.beforeEach(async (to, from, next) => {
  const authStore = useAuthStore();
  
  // Try to fetch user on page load if token exists but user object is null
  if (authStore.token && !authStore.user) {
    await authStore.fetchUser();
  }

  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);
  const requiresAdmin = to.matched.some(record => record.meta.requiresAdmin);
  
  if (requiresAuth && !authStore.isAuthenticated) {
    // If route requires auth and user is not authenticated, redirect to login
    next('/login');
  } else if (requiresAdmin && !authStore.isAdmin) {
    // If route requires admin and user is not admin, redirect to dashboard
    next('/');
  } else if (to.path === '/login' && authStore.isAuthenticated) {
    // If user is authenticated and tries to visit login page, redirect to dashboard
    next('/');
  }
  else {
    // Otherwise, proceed
    next();
  }
});

export default router;

```


### File: src/services/api.js

```
import axios from 'axios';
import { useAuthStore } from '../stores/authStore';

// Create an Axios instance with a base URL from environment variables
const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://ai-ndhu-lab:7576/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor to include the auth token in headers
apiClient.interceptors.request.use(
  (config) => {
    const authStore = useAuthStore();
    const token = authStore.token;
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default apiClient;

```


### File: src/components/ImageChatMessage.vue

```
<template>
  <div class="p-2 rounded-lg max-w-xs break-words bg-gray-200 dark:bg-gray-700">
    <img
      :src="imageUrl"
      alt="User upload"
      class="rounded-md cursor-pointer w-full object-cover"
      @click="$emit('image-clicked')"
      loading="lazy"
    />
    <p v-if="description" class="text-sm text-gray-800 dark:text-gray-200 mt-2 p-1 italic">
      "{{ description }}"
    </p>
  </div>
</template>

<script setup>
import { computed } from 'vue';
import apiClient from '../services/api';

const props = defineProps({
  image: {
    type: Object,
    required: true,
  },
  description: {
    type: String,
    default: '',
  },
});

defineEmits(['image-clicked']);

const imageUrl = computed(() => {
  if (!props.image || !props.image.file_path) return '';
  // Construct the full URL to the static image file on the backend
  const baseUrl = (apiClient.defaults.baseURL || '').replace('/api', '');
  return `${baseUrl}${props.image.file_path}`;
});
</script>

```


### File: src/components/ChatFeedbackCard.vue

```
<template>
  <div v-if="feedbackData && feedbackData.status !== 'no_errors'" class="border-l-4 p-3 rounded-r-lg max-w-xs break-words" :class="cardClasses">
    
    <p class="text-xs font-bold mb-2" :class="textColor">Quick Correction!</p>
    <div class="space-y-1 text-sm">
      <p class="text-gray-800 dark:text-gray-200">
        You wrote: 
        <span class="line-through text-red-600 bg-red-100 dark:bg-red-900/50 dark:text-red-300 px-1 rounded">"{{ feedbackData.incorrect_phrase }}"</span>
      </p>
      <p class="text-gray-800 dark:text-gray-200">
        The correct way is: 
        <span class="font-semibold text-green-700 bg-green-100 dark:bg-green-900/50 dark:text-green-300 px-1 rounded">"{{ feedbackData.suggestion }}"</span>
      </p>
      <p class="text-xs text-gray-700 dark:text-gray-300 mt-3 bg-white dark:bg-gray-700/50 p-2 rounded">
        <strong>Why:</strong> {{ feedbackData.explanation }}
      </p>
    </div>

  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue';

const props = defineProps({
  message: {
    type: Object,
    required: true,
  },
});

const feedbackData = ref(null);

onMounted(() => {
  try {
    feedbackData.value = JSON.parse(props.message.message_text);
  } catch (e) {
    console.error("Failed to parse chat feedback JSON:", e);
    feedbackData.value = null;
  }
});

// Since the component no longer renders for 'no_errors', we can simplify the computed properties.
const cardClasses = computed(() => {
  return 'bg-teal-50 dark:bg-teal-900/50 border-teal-400 dark:border-teal-600';
});

const textColor = computed(() => {
  return 'text-teal-700 dark:text-teal-200';
});

</script>
```


### File: src/components/ImageStack.vue

```
<template>
  <div
    v-if="images && images.length > 0"
    @click="$emit('stack-clicked')"
    class="group absolute top-4 right-4 z-10 cursor-pointer flex items-center justify-center w-20 h-20"
    title="View attached images"
  >
    <!-- Stacked Images -->
    <img
      v-for="(image, index) in visibleImages"
      :key="image.id"
      :src="getImageUrl(image.file_path)"
      alt="Journal image thumbnail"
      class="absolute w-14 h-14 object-cover rounded-md border-2 border-white dark:border-gray-800 shadow-lg transition-transform duration-300 ease-in-out group-hover:shadow-xl"
      :style="{ transform: `rotate(${rotations[index]}deg) translate(${translations[index].x}px, ${translations[index].y}px)`, zIndex: 2 - index }"
    />
    <!-- Image Count Badge -->
    <div
      v-if="images.length > 1"
      class="absolute -top-1 -right-1 bg-indigo-600 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center border-2 border-white dark:border-gray-800"
      style="z-index: 3;"
    >
      {{ images.length }}
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue';
import apiClient from '../services/api';

const props = defineProps({
  images: {
    type: Array,
    required: true,
  },
});

defineEmits(['stack-clicked']);

const getImageUrl = (filePath) => {
  if (!filePath) return '';
  // Construct the full URL to the static image file on the backend
  const baseUrl = (apiClient.defaults.baseURL || '').replace('/api', '');
  return `${baseUrl}${filePath}`;
};

// Show up to 3 images in the stack for visual effect
const visibleImages = computed(() => props.images.slice(0, 3).reverse());

// Pre-defined rotations and translations for a nice stacked effect
const rotations = [-10, 5, 15];
const translations = [
  { x: -5, y: 0 },
  { x: 5, y: 2 },
  { x: 0, y: -3 },
];

</script>

```


### File: src/components/ErrorDetailCard.vue

```
<template>
  <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
    <div class="flex justify-between items-start">
        <div>
            <p class="text-sm text-gray-800 dark:text-gray-200">
                Your phrase: 
                <span class="line-through text-red-600 bg-red-100 dark:bg-red-900/50 dark:text-red-300 px-1 rounded">"{{ error.incorrect_phrase }}"</span>
            </p>
            <p class="text-sm mt-1 text-gray-800 dark:text-gray-200">
                Suggestion: 
                <span class="font-semibold text-green-700 bg-green-100 dark:bg-green-900/50 dark:text-green-300 px-1 rounded">"{{ error.suggestion_text }}"</span>
            </p>
        </div>
        <div class="text-xs text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-700 px-2 py-1 rounded-md border dark:border-gray-600">
            Repeated: <span class="font-bold">{{ error.repetition_count }}</span> time{{ error.repetition_count > 1 ? 's' : ''}}
        </div>
    </div>
    <p class="text-xs text-gray-700 dark:text-gray-300 mt-3 bg-white dark:bg-gray-700 p-2 rounded border dark:border-gray-600">
      <strong>Explanation:</strong> {{ error.explanation_text }}
    </p>
  </div>
</template>

<script setup>
defineProps({
  error: {
    type: Object,
    required: true,
  },
});
</script>

```


### File: src/components/JournalCard.vue

```
<template>
  <router-link
    :to="`/writer/${journal.journal_date}`"
    class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 hover:border-indigo-400 dark:hover:border-indigo-500 transition-colors cursor-pointer flex items-start gap-4"
    :class="{ 'border-green-400 dark:border-green-600': journal.writing_phase === 'completed' }"
  >
    <!-- Image Placeholder -->
    <div class="w-24 h-[70px] bg-gray-100 dark:bg-gray-700 rounded-md flex items-center justify-center flex-shrink-0">
      <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="text-gray-400 dark:text-gray-500" viewBox="0 0 256 256"><path d="M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM48,48H208V157.38l-19.52-19.52a16,16,0,0,0-22.62,0L144,160,99.51,115.51a16,16,0,0,0-22.62,0L48,144.38ZM208,208H48V172.69l36.49-36.5,44.49,44.49a16,16,0,0,0,22.62,0L176,159.31l32,32V208Zm-40-88a12,12,0,1,1,12-12A12,12,0,0,1,168,120Z"></path></svg>
    </div>
    <div class="flex-grow overflow-hidden">
      <div class="flex items-center gap-2">
        <h4 class="font-bold text-md text-gray-800 dark:text-gray-200 truncate">{{ journal.title || 'Journal Entry' }}</h4>
        <div v-if="journal.writing_phase === 'completed'" class="flex-shrink-0 bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300 text-xs font-bold px-2 py-0.5 rounded-full">
          Completed
        </div>
      </div>
      <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">{{ journalStore.formatDisplayDate(journal.journal_date) }}</p>
      <p class="text-sm text-gray-600 dark:text-gray-300 leading-relaxed">{{ snippet }}</p>
    </div>
    <!-- Caret Icon -->
    <div class="self-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="text-gray-400 dark:text-gray-500" viewBox="0 0 256 256"><path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path></svg>
    </div>
  </router-link>
</template>

<script setup>
import { computed } from 'vue';
import { useJournalStore } from '../stores/journalStore';

const journalStore = useJournalStore();

const props = defineProps({
  journal: {
    type: Object,
    required: true,
  },
});

// Create a snippet from the full content
const snippet = computed(() => {
  if (!props.journal.content) {
    return 'No content yet...';
  }
  // Truncate the content to 120 characters
  if (props.journal.content.length > 120) {
    return props.journal.content.substring(0, 120) + '...';
  }
  return props.journal.content;
});
</script>

```


### File: src/components/TopicCard.vue

```
<template>
  <router-link
    :to="`/learning-hub/topic/${topic.topic_id}`"
    class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 hover:border-indigo-400 dark:hover:border-indigo-500 transition-colors cursor-pointer flex justify-between items-center"
  >
    <div>
      <h4 class="font-bold text-md text-gray-800 dark:text-gray-200">{{ topic.topic_name }}</h4>
      <p class="text-sm text-gray-500 dark:text-gray-400">{{ topic.error_count }} unique error{{ topic.error_count > 1 ? 's' : '' }} logged</p>
    </div>
    <!-- Caret Icon -->
    <div class="self-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="text-gray-400 dark:text-gray-500" viewBox="0 0 256 256"><path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path></svg>
    </div>
  </router-link>
</template>

<script setup>
defineProps({
  topic: {
    type: Object,
    required: true,
  },
});
</script>

```


### File: src/components/ProgressSummaryCard.vue

```
<template>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
    <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100">Your Learning Snapshot</h3>
    <div v-if="isLoading" class="text-center text-gray-500 dark:text-gray-400">
      Loading progress...
    </div>
    <div v-else-if="error" class="bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-300 p-3 rounded-lg">
      {{ error }}
    </div>
    <div v-else-if="summary" class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Total Errors -->
      <div class="bg-blue-50 dark:bg-blue-900/50 p-4 rounded-lg text-center">
        <p class="text-3xl font-bold text-blue-600 dark:text-blue-400">{{ summary.total_errors }}</p>
        <p class="text-sm font-medium text-blue-800 dark:text-blue-200">Total Errors Logged</p>
      </div>
      <!-- Topics Encountered -->
      <div class="bg-green-50 dark:bg-green-900/50 p-4 rounded-lg text-center">
        <p class="text-3xl font-bold text-green-600 dark:text-green-400">{{ summary.topics_encountered }}</p>
        <p class="text-sm font-medium text-green-800 dark:text-green-200">Topics Encountered</p>
      </div>
      <!-- Top Focus Topic -->
      <div class="bg-yellow-50 dark:bg-yellow-900/50 p-4 rounded-lg text-center flex flex-col justify-center">
        <p class="text-lg font-bold text-yellow-700 dark:text-yellow-300 leading-tight truncate">
            {{ topTopicName }}
        </p>
        <p class="text-sm font-medium text-yellow-800 dark:text-yellow-200 mt-1">Your Top Focus Area</p>
      </div>
    </div>
    <div v-else class="text-center text-gray-500 dark:text-gray-400">
      <p>No progress data yet. Start writing and get some feedback!</p>
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue';

const props = defineProps({
  summary: {
    type: Object,
    default: null,
  },
  isLoading: {
    type: Boolean,
    default: false,
  },
  error: {
    type: String,
    default: null,
  },
});

const topTopicName = computed(() => {
    if (props.summary && props.summary.top_topics && props.summary.top_topics.length > 0) {
        return props.summary.top_topics[0].topic_name;
    }
    return 'N/A';
});
</script>

```


### File: src/components/AIFeedbackCard.vue

```
<template>
  <div class="p-4 rounded-lg flex justify-between items-start gap-4" :class="[cardColorClasses.bg, { 'opacity-60': isApplied }]">
    <div class="flex-grow">
      <p class="font-semibold" :class="cardColorClasses.text">
        {{ feedbackItem.category }} <!-- BUG FIX: Changed error_type to category -->
      </p>
      <p class="text-sm mt-2">
        Incorrect phrase: 
        <span class="line-through text-red-600 bg-red-100 dark:bg-red-900/50 dark:text-red-300 px-1 rounded">"{{ feedbackItem.incorrect_phrase }}"</span>
      </p>
      <p class="text-sm mt-1">
        Suggestion: 
        <span class="font-semibold text-green-700 bg-green-100 dark:bg-green-900/50 dark:text-green-300 px-1 rounded">"{{ feedbackItem.suggestion }}"</span>
      </p>
      <p class="text-xs text-gray-700 dark:text-gray-300 mt-2 bg-gray-100 dark:bg-gray-700/50 p-2 rounded">
        <strong>Explanation:</strong> {{ feedbackItem.explanation }}
      </p>
    </div>
    <div class="flex-shrink-0">
        <button 
          @click="$emit('apply-suggestion', feedbackItem)" 
          :disabled="isApplied"
          class="bg-white dark:bg-gray-600 text-sm font-semibold px-3 py-1 rounded-md border border-gray-300 dark:border-gray-500 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-500 disabled:bg-gray-100 disabled:cursor-not-allowed disabled:text-gray-400 dark:disabled:bg-gray-800 dark:disabled:text-gray-500 transition-colors flex items-center gap-1.5"
        >
          <svg v-if="!isApplied" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256"><path d="M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z"></path></svg>
          <svg v-else xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256"><path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm45.66-125.66a8,8,0,0,1,0,11.32L133.31,144l-22.34,22.34a8,8,0,0,1-11.32-11.32L122,132.69,99.66,110.34a8,8,0,0,1,11.32-11.32L132,121.31l22.34-22.34A8,8,0,0,1,173.66,90.34Z"></path></svg>
          {{ isApplied ? 'Applied' : 'Apply' }}
        </button>
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue';

const props = defineProps({
  feedbackItem: {
    type: Object,
    required: true,
  },
  isApplied: {
    type: Boolean,
    default: false
  }
});

defineEmits(['apply-suggestion']);

// Dynamically change card colors for better visual grouping of feedback
const cardColorClasses = computed(() => {
  // BUG FIX: Changed error_type to category
  const category = props.feedbackItem.category.toLowerCase();
  if (category.includes('grammar')) {
    return { bg: 'bg-blue-50 dark:bg-blue-900/50', text: 'text-blue-800 dark:text-blue-200' };
  }
  if (category.includes('vocabulary') || category.includes('phrasing')) {
    return { bg: 'bg-purple-50 dark:bg-purple-900/50', text: 'text-purple-800 dark:text-purple-200' };
  }
  if (category.includes('cohesion') || category.includes('style')) {
      return { bg: 'bg-yellow-50 dark:bg-yellow-900/50', text: 'text-yellow-800 dark:text-yellow-200'};
  }
  return { bg: 'bg-gray-100 dark:bg-gray-700', text: 'text-gray-800 dark:text-gray-200' }; // Default color
});
</script>

```


### File: src/components/ManualModal.vue

```
<template>
  <!-- 
    This is a reusable modal component. 
    It appears as an overlay and can be closed by clicking the background or the 'X' button.
  -->
  <div v-if="show" class="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 transition-opacity duration-300" @click.self="close">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg w-full max-w-3xl max-h-[90vh] flex flex-col transform transition-transform duration-300 scale-95" :class="{ 'scale-100': show }">
      <!-- Modal Header -->
      <header class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center flex-shrink-0">
        <h2 class="text-xl font-bold text-gray-900 dark:text-gray-100">{{ title }}</h2>
        <button @click="close" title="Close manual" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="text-gray-600 dark:text-gray-300" fill="currentColor" viewBox="0 0 256 256"><path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"></path></svg>
        </button>
      </header>
      <!-- Modal Content -->
      <main class="flex-grow overflow-y-auto p-6 prose dark:prose-invert max-w-none custom-scrollbar">
        <!-- The manual content will be injected here -->
        <div v-html="content"></div>
      </main>
    </div>
  </div>
</template>

<script setup>
import { watch, onUnmounted } from 'vue';

// This component receives 'show', 'title', and 'content' as properties from its parent.
const props = defineProps({
  show: Boolean,
  title: String,
  content: String,
});

// Defines a custom event 'close' that the parent component can listen for.
const emit = defineEmits(['close']);

// Emits the 'close' event when the modal should be closed.
const close = () => {
  emit('close');
};

// This watcher adds/removes a class to the body to prevent background scrolling when the modal is open.
watch(() => props.show, (isShowing) => {
  if (isShowing) {
    document.body.classList.add('modal-open');
  } else {
    document.body.classList.remove('modal-open');
  }
});

// This ensures that if the component is ever removed from the DOM unexpectedly, the class is cleaned up.
onUnmounted(() => {
  document.body.classList.remove('modal-open');
});
</script>

<style>
/* These are basic styles to make the HTML from the manual content look good.
  They are scoped to the `.prose` class which is applied to the content area.
*/
.prose h1, .prose h2, .prose h3 { @apply font-bold mb-2; }
.prose h1 { @apply text-2xl; }
.prose h2 { @apply text-xl border-b border-gray-200 dark:border-gray-700 pb-2 mb-4; }
.prose h3 { @apply text-lg; }
.prose p { @apply mb-4 leading-relaxed; }
.prose ul, .prose ol { @apply list-inside mb-4 pl-2; }
.prose li { @apply mb-2; }
.prose code { @apply bg-gray-100 dark:bg-gray-700 rounded px-1 py-0.5 text-sm font-mono text-indigo-600 dark:text-indigo-400; }
.prose strong { @apply font-semibold; }
.prose a { @apply text-indigo-600 dark:text-indigo-400 hover:underline; }
.prose hr { @apply my-6 border-gray-200 dark:border-gray-700; }
/* This new style will make images in the manual responsive and visually appealing. */
.prose img { @apply rounded-lg shadow-md my-4 max-w-full h-auto; }
</style>


```


### File: src/components/ImageCarousel.vue

```
<template>
  <div
    v-if="show"
    class="fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-4 transition-opacity duration-300"
    @click.self="close"
  >
    <!-- Close Button -->
    <button
      @click="close"
      title="Close"
      class="absolute top-4 right-4 p-2 rounded-full bg-black/50 text-white hover:bg-black/80 transition-colors z-10"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256">
        <path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"></path>
      </svg>
    </button>

    <!-- Main Content -->
    <div class="relative w-full flex flex-col items-center justify-center">
      <!-- Image Container -->
      <div class="relative flex-grow flex items-center justify-center w-full max-w-4xl max-h-[80vh]">
        <img :src="currentImageUrl" :alt="currentImage.ai_description" class="max-w-full max-h-full object-contain rounded-lg" />
      </div>
      <!-- Description -->
      <div v-if="currentImage.ai_description" class="flex-shrink-0 mt-4 p-2 bg-black/60 rounded-lg text-center max-w-4xl">
        <p class="text-white text-sm">{{ currentImage.ai_description }}</p>
      </div>
    </div>

    <!-- Navigation Buttons -->
    <button
      v-if="images.length > 1"
      @click.stop="prevImage"
      title="Previous"
      class="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 text-white hover:bg-black/80 transition-colors"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256">
        <path d="M165.66,202.34a8,8,0,0,1-11.32,0L80,128,154.34,53.66a8,8,0,0,1,11.32,11.32L97.31,128l68.35,68.34A8,8,0,0,1,165.66,202.34Z"></path>
      </svg>
    </button>
    <button
      v-if="images.length > 1"
      @click.stop="nextImage"
      title="Next"
      class="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 text-white hover:bg-black/80 transition-colors"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256">
        <path d="M90.34,53.66a8,8,0,0,0-11.32,0l-80,80a8,8,0,0,0,0,11.32l80,80a8,8,0,0,0,11.32-11.32L17.31,128,90.34,53.66Z" transform="rotate(180, 128, 128)"></path>
      </svg>
    </button>
  </div>
</template>

<script setup>
import { ref, computed, watch } from 'vue';
import apiClient from '../services/api';

const props = defineProps({
  show: Boolean,
  images: {
    type: Array,
    required: true,
  },
  startIndex: {
    type: Number,
    default: 0,
  },
});

const emit = defineEmits(['close']);

const currentIndex = ref(props.startIndex);

watch(() => props.startIndex, (newIndex) => {
  currentIndex.value = newIndex;
});

const currentImage = computed(() => props.images[currentIndex.value] || {});

const currentImageUrl = computed(() => {
  if (!currentImage.value || !currentImage.value.file_path) return '';
  const baseUrl = (apiClient.defaults.baseURL || '').replace('/api', '');
  return `${baseUrl}${currentImage.value.file_path}`;
});

const close = () => {
  emit('close');
};

const nextImage = () => {
  currentIndex.value = (currentIndex.value + 1) % props.images.length;
};

const prevImage = () => {
  currentIndex.value = (currentIndex.value - 1 + props.images.length) % props.images.length;
};
</script>


```


### File: src/components/admin/StudentTable.vue

```
<template>
  <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
    <div class="p-4">
      <h4 class="font-semibold text-gray-800 dark:text-gray-200">Students</h4>
    </div>
    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
      <thead class="bg-gray-50 dark:bg-gray-700/50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Student Info</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Journals</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Errors</th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Last Active</th>
          <th scope="col" class="relative px-6 py-3"><span class="sr-only">View</span></th>
        </tr>
      </thead>
      <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
        <tr v-for="student in students" :key="student.id" class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ student.realname }} ({{ student.username }}) [{{ student.group }}]</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">{{ student.student_id }}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">{{ student.email }}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{{ student.journal_count }}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{{ student.total_errors }}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">{{ formatDate(student.last_active) }}</td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <router-link :to="`/admin/student/${student.id}`" class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">View</router-link>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup>
import { formatDistanceToNow } from 'date-fns';

defineProps({
  students: {
    type: Array,
    required: true,
  },
});

const formatDate = (dateString) => {
  if (!dateString) return 'Never';
  return formatDistanceToNow(new Date(dateString), { addSuffix: true });
};
</script>
```


### File: src/components/admin/ErrorDistributionChart.vue

```
<template>
  <div class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
    <h4 class="font-semibold text-gray-800 dark:text-gray-200 mb-4">{{ title }}</h4>
    
    <div class="relative h-72">
      <Bar v-if="chartData.datasets.length > 0" :data="chartData" :options="chartOptions" />
      <div v-else class="text-center py-10 text-gray-500 dark:text-gray-400">
        <p>No data available to display the chart.</p>
      </div>
    </div>
    
  </div>
</template>

<script setup>
import { computed } from 'vue';
import { Bar } from 'vue-chartjs';
import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';
import { useUiStore } from '../../stores/uiStore';

ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);

const props = defineProps({
  title: {
    type: String,
    required: true,
    default: 'Error Distribution'
  },
  chartRawData: {
    type: Array,
    required: true,
    default: () => []
  }
});

const uiStore = useUiStore();

const chartData = computed(() => {
    const labels = props.chartRawData.map(d => d.topic_name);
    const data = props.chartRawData.map(d => d.error_count);
    return {
        labels: labels,
        datasets: [
            {
                label: 'Error Count',
                backgroundColor: '#4f46e5', // Indigo-600
                borderColor: '#4f46e5',
                borderRadius: 4,
                data: data,
            },
        ],
    };
});

const chartOptions = computed(() => ({
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      display: false,
    },
  },
  scales: {
    x: {
      ticks: {
        color: uiStore.isDarkMode ? '#d1d5db' : '#4b5563', // Gray-300 for dark, Gray-600 for light
      },
      grid: {
        display: false,
      },
    },
    y: {
      ticks: {
        color: uiStore.isDarkMode ? '#d1d5db' : '#4b5563',
      },
      grid: {
        color: uiStore.isDarkMode ? '#374151' : '#e5e7eb', // Gray-700 for dark, Gray-200 for light
      },
    },
  },
}));
</script>

```


### File: src/components/admin/AdminStatCard.vue

```
<template>
  <div class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
    <h4 class="text-sm font-medium text-gray-500 dark:text-gray-400">{{ title }}</h4>
    <p class="text-3xl font-bold text-gray-900 dark:text-gray-100 mt-1">{{ value }}</p>
  </div>
</template>

<script setup>
defineProps({
  title: {
    type: String,
    required: true,
  },
  value: {
    type: [String, Number],
    required: true,
  },
});
</script>

```


### File: src/components/admin/AdminJournalCard.vue

```
<template>
  <router-link
    :to="`/admin/student/${journal.user_id}/journal/${journal.journal_date}`"
    class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 hover:border-indigo-400 dark:hover:border-indigo-500 transition-colors cursor-pointer flex items-start gap-4"
    :class="{ 'border-green-400 dark:border-green-600': journal.writing_phase === 'completed' }"
  >
    <div class="flex-grow overflow-hidden">
      <div class="flex items-center gap-2">
        <h4 class="font-bold text-md text-gray-800 dark:text-gray-200 truncate">{{ journal.title || 'Journal Entry' }}</h4>
        <div v-if="journal.writing_phase === 'completed'" class="flex-shrink-0 bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300 text-xs font-bold px-2 py-0.5 rounded-full">
          Completed
        </div>
      </div>
      <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">{{ formatDate(journal.journal_date) }}</p>
      <p class="text-sm text-gray-600 dark:text-gray-300 leading-relaxed">{{ snippet }}</p>
    </div>
    <!-- Caret Icon -->
    <div class="self-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="text-gray-400 dark:text-gray-500" viewBox="0 0 256 256"><path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path></svg>
    </div>
  </router-link>
</template>

<script setup>
import { computed } from 'vue';
import { format, parseISO } from 'date-fns';

const props = defineProps({
  journal: {
    type: Object,
    required: true,
  },
});

// Create a snippet from the full content
const snippet = computed(() => {
  if (!props.journal.content) {
    return 'No content yet...';
  }
  // Truncate the content to 120 characters
  if (props.journal.content.length > 120) {
    return props.journal.content.substring(0, 120) + '...';
  }
  return props.journal.content;
});

const formatDate = (dateString) => {
  if (!dateString) return '';
  // parseISO handles the 'YYYY-MM-DD' format
  const date = parseISO(dateString);
  return format(date, 'MMMM d, yyyy');
};
</script>

```


### File: src/components/admin/ErrorTrendChart.vue

```
<template>
  <div class="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
    <h4 class="font-semibold text-gray-800 dark:text-gray-200 mb-4">{{ title }}</h4>
    
    <div class="relative h-72">
      <Line v-if="chartData.datasets.length > 0 && chartData.datasets[0].data.length > 0" :data="chartData" :options="chartOptions" />
      <div v-else class="text-center py-10 text-gray-500 dark:text-gray-400">
        <p>No data available to display the chart.</p>
      </div>
    </div>

  </div>
</template>

<script setup>
import { computed } from 'vue';
import { Line } from 'vue-chartjs';
import { Chart as ChartJS, Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale, Filler } from 'chart.js';
import { useUiStore } from '../../stores/uiStore';

// Register all necessary components for Chart.js
ChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale, Filler);

const props = defineProps({
  title: {
    type: String,
    required: true,
    default: 'Writing Activity (Last 30 Days)'
  },
  chartRawData: {
    type: Array,
    required: true,
    default: () => []
  }
});

const uiStore = useUiStore();

const chartData = computed(() => {
    // FIX: The property from the API is `activity_date`, not `date`.
    const labels = props.chartRawData.map(d => new Date(d.activity_date).toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
    const data = props.chartRawData.map(d => d.error_count);
    
    return {
        labels: labels,
        datasets: [
            {
                label: 'Errors per Day',
                backgroundColor: 'rgba(79, 70, 229, 0.2)',
                borderColor: '#4f46e5', // Indigo-600
                data: data,
                fill: true,
                tension: 0.3,
            },
        ],
    };
});

const chartOptions = computed(() => ({
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      display: false,
    },
  },
  scales: {
    x: {
      ticks: {
        color: uiStore.isDarkMode ? '#d1d5db' : '#4b5563', // Text color for dark/light mode
      },
      grid: {
        display: false, // Hide vertical grid lines
      },
    },
    y: {
      beginAtZero: true,
      ticks: {
        color: uiStore.isDarkMode ? '#d1d5db' : '#4b5563', // Text color for dark/light mode
        stepSize: 1, // Ensure y-axis labels are whole numbers
      },
      grid: {
        color: uiStore.isDarkMode ? '#374151' : '#e5e7eb', // Grid line color for dark/light mode
      },
    },
  },
}));
</script>

```
